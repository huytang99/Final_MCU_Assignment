
MCU_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000520c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005318  08005318  00015318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005384  08005384  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08005384  08005384  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005384  08005384  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005384  08005384  00015384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005388  08005388  00015388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800538c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000098  08005424  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08005424  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ebd  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d82  00000000  00000000  00031f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00034d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  00035b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a872  00000000  00000000  00036830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000137b9  00000000  00000000  000510a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aeea  00000000  00000000  0006485b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef745  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c78  00000000  00000000  000ef798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08005300 	.word	0x08005300

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08005300 	.word	0x08005300

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <automatic_run>:

#include "automatic_fsm.h"



void automatic_run(){
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	switch (status)
 800093c:	4b70      	ldr	r3, [pc, #448]	; (8000b00 <automatic_run+0x1c8>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	3b01      	subs	r3, #1
 8000942:	2b04      	cmp	r3, #4
 8000944:	f200 80da 	bhi.w	8000afc <automatic_run+0x1c4>
 8000948:	a201      	add	r2, pc, #4	; (adr r2, 8000950 <automatic_run+0x18>)
 800094a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094e:	bf00      	nop
 8000950:	08000965 	.word	0x08000965
 8000954:	08000999 	.word	0x08000999
 8000958:	080009eb 	.word	0x080009eb
 800095c:	08000a43 	.word	0x08000a43
 8000960:	08000a97 	.word	0x08000a97
	{
	case INIT:
		pedsStatus = NO_PED;
 8000964:	4b67      	ldr	r3, [pc, #412]	; (8000b04 <automatic_run+0x1cc>)
 8000966:	2202      	movs	r2, #2
 8000968:	601a      	str	r2, [r3, #0]
		Red_1();
 800096a:	f000 ffd3 	bl	8001914 <Red_1>
		Green_2();
 800096e:	f001 f859 	bl	8001a24 <Green_2>
		pedsGreen();
 8000972:	f001 f8bd 	bl	8001af0 <pedsGreen>
		status=AUTO_RED_GREEN;
 8000976:	4b62      	ldr	r3, [pc, #392]	; (8000b00 <automatic_run+0x1c8>)
 8000978:	2202      	movs	r2, #2
 800097a:	601a      	str	r2, [r3, #0]
		numberCounter = redDuration1;
 800097c:	4b62      	ldr	r3, [pc, #392]	; (8000b08 <automatic_run+0x1d0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a62      	ldr	r2, [pc, #392]	; (8000b0c <automatic_run+0x1d4>)
 8000982:	6013      	str	r3, [r2, #0]
		UART_display();
 8000984:	f001 f8dc 	bl	8001b40 <UART_display>
		setTimer1(1000);
 8000988:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800098c:	f000 ff78 	bl	8001880 <setTimer1>
		pedsStatus = PED_GREEN;
 8000990:	4b5c      	ldr	r3, [pc, #368]	; (8000b04 <automatic_run+0x1cc>)
 8000992:	2204      	movs	r2, #4
 8000994:	601a      	str	r2, [r3, #0]
		//buzzer
		break;
 8000996:	e0b1      	b.n	8000afc <automatic_run+0x1c4>
	case AUTO_RED_GREEN:
		if(timer1_flag == 1){
 8000998:	4b5d      	ldr	r3, [pc, #372]	; (8000b10 <automatic_run+0x1d8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d11a      	bne.n	80009d6 <automatic_run+0x9e>
			numberCounter--;
 80009a0:	4b5a      	ldr	r3, [pc, #360]	; (8000b0c <automatic_run+0x1d4>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3b01      	subs	r3, #1
 80009a6:	4a59      	ldr	r2, [pc, #356]	; (8000b0c <automatic_run+0x1d4>)
 80009a8:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 80009aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ae:	f000 ff67 	bl	8001880 <setTimer1>
			if(numberCounter == yellowDuration2){
 80009b2:	4b56      	ldr	r3, [pc, #344]	; (8000b0c <automatic_run+0x1d4>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	4b57      	ldr	r3, [pc, #348]	; (8000b14 <automatic_run+0x1dc>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d106      	bne.n	80009cc <automatic_run+0x94>
				Yellow_2();
 80009be:	f001 f841 	bl	8001a44 <Yellow_2>
				pedsGreen();
 80009c2:	f001 f895 	bl	8001af0 <pedsGreen>
				status=AUTO_RED_YELLOW;
 80009c6:	4b4e      	ldr	r3, [pc, #312]	; (8000b00 <automatic_run+0x1c8>)
 80009c8:	2203      	movs	r2, #3
 80009ca:	601a      	str	r2, [r3, #0]

			}
			pedsStatus = PED_GREEN;
 80009cc:	4b4d      	ldr	r3, [pc, #308]	; (8000b04 <automatic_run+0x1cc>)
 80009ce:	2204      	movs	r2, #4
 80009d0:	601a      	str	r2, [r3, #0]
			UART_display();
 80009d2:	f001 f8b5 	bl	8001b40 <UART_display>
		}

		if(isButtonPressed(1)){
 80009d6:	2001      	movs	r0, #1
 80009d8:	f000 f8a2 	bl	8000b20 <isButtonPressed>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f000 8085 	beq.w	8000aee <automatic_run+0x1b6>
			autoClickButton1();
 80009e4:	f001 faf2 	bl	8001fcc <autoClickButton1>
			break;
 80009e8:	e088      	b.n	8000afc <automatic_run+0x1c4>
		}
		break;
	case AUTO_RED_YELLOW:
		if(timer1_flag == 1){
 80009ea:	4b49      	ldr	r3, [pc, #292]	; (8000b10 <automatic_run+0x1d8>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d11e      	bne.n	8000a30 <automatic_run+0xf8>
			numberCounter--;
 80009f2:	4b46      	ldr	r3, [pc, #280]	; (8000b0c <automatic_run+0x1d4>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	4a44      	ldr	r2, [pc, #272]	; (8000b0c <automatic_run+0x1d4>)
 80009fa:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 80009fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a00:	f000 ff3e 	bl	8001880 <setTimer1>
			if(numberCounter == 0){
 8000a04:	4b41      	ldr	r3, [pc, #260]	; (8000b0c <automatic_run+0x1d4>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d10f      	bne.n	8000a2c <automatic_run+0xf4>
				numberCounter = greenDuration1;
 8000a0c:	4b42      	ldr	r3, [pc, #264]	; (8000b18 <automatic_run+0x1e0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a3e      	ldr	r2, [pc, #248]	; (8000b0c <automatic_run+0x1d4>)
 8000a12:	6013      	str	r3, [r2, #0]
				Green_1();
 8000a14:	f000 ff92 	bl	800193c <Green_1>
				Red_2();
 8000a18:	f000 fff4 	bl	8001a04 <Red_2>
				pedsRed();
 8000a1c:	f001 f854 	bl	8001ac8 <pedsRed>
				status=AUTO_GREEN_RED;
 8000a20:	4b37      	ldr	r3, [pc, #220]	; (8000b00 <automatic_run+0x1c8>)
 8000a22:	2204      	movs	r2, #4
 8000a24:	601a      	str	r2, [r3, #0]
				pedsStatus = PED_RED;
 8000a26:	4b37      	ldr	r3, [pc, #220]	; (8000b04 <automatic_run+0x1cc>)
 8000a28:	2203      	movs	r2, #3
 8000a2a:	601a      	str	r2, [r3, #0]
				//buzzer
			}
			UART_display();
 8000a2c:	f001 f888 	bl	8001b40 <UART_display>
		}

		if(isButtonPressed(1)){
 8000a30:	2001      	movs	r0, #1
 8000a32:	f000 f875 	bl	8000b20 <isButtonPressed>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d05a      	beq.n	8000af2 <automatic_run+0x1ba>
			autoClickButton1();
 8000a3c:	f001 fac6 	bl	8001fcc <autoClickButton1>
			break;
 8000a40:	e05c      	b.n	8000afc <automatic_run+0x1c4>
		}
		break;

	case AUTO_GREEN_RED:
		if(timer1_flag == 1){
 8000a42:	4b33      	ldr	r3, [pc, #204]	; (8000b10 <automatic_run+0x1d8>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d11c      	bne.n	8000a84 <automatic_run+0x14c>
			numberCounter--;
 8000a4a:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <automatic_run+0x1d4>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	4a2e      	ldr	r2, [pc, #184]	; (8000b0c <automatic_run+0x1d4>)
 8000a52:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000a54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a58:	f000 ff12 	bl	8001880 <setTimer1>
			if(numberCounter == 0){
 8000a5c:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <automatic_run+0x1d4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d10d      	bne.n	8000a80 <automatic_run+0x148>
				numberCounter = yellowDuration1;
 8000a64:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <automatic_run+0x1e4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a28      	ldr	r2, [pc, #160]	; (8000b0c <automatic_run+0x1d4>)
 8000a6a:	6013      	str	r3, [r2, #0]
				Yellow_1();
 8000a6c:	f000 ff7a 	bl	8001964 <Yellow_1>
				pedsRed();
 8000a70:	f001 f82a 	bl	8001ac8 <pedsRed>
				status=AUTO_YELLOW_RED;
 8000a74:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <automatic_run+0x1c8>)
 8000a76:	2205      	movs	r2, #5
 8000a78:	601a      	str	r2, [r3, #0]
				pedsStatus = PED_RED;
 8000a7a:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <automatic_run+0x1cc>)
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	601a      	str	r2, [r3, #0]
			}
			UART_display();
 8000a80:	f001 f85e 	bl	8001b40 <UART_display>
		}

		if(isButtonPressed(1)){
 8000a84:	2001      	movs	r0, #1
 8000a86:	f000 f84b 	bl	8000b20 <isButtonPressed>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d032      	beq.n	8000af6 <automatic_run+0x1be>
			autoClickButton1();
 8000a90:	f001 fa9c 	bl	8001fcc <autoClickButton1>
			break;
 8000a94:	e032      	b.n	8000afc <automatic_run+0x1c4>
		}
		break;

	case AUTO_YELLOW_RED:

		if(timer1_flag == 1){
 8000a96:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <automatic_run+0x1d8>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d11e      	bne.n	8000adc <automatic_run+0x1a4>
			numberCounter--;
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <automatic_run+0x1d4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <automatic_run+0x1d4>)
 8000aa6:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000aa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aac:	f000 fee8 	bl	8001880 <setTimer1>
			if(numberCounter == 0){
 8000ab0:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <automatic_run+0x1d4>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d10f      	bne.n	8000ad8 <automatic_run+0x1a0>
				numberCounter = redDuration1;
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <automatic_run+0x1d0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a13      	ldr	r2, [pc, #76]	; (8000b0c <automatic_run+0x1d4>)
 8000abe:	6013      	str	r3, [r2, #0]
				Red_1();
 8000ac0:	f000 ff28 	bl	8001914 <Red_1>
				Green_2();
 8000ac4:	f000 ffae 	bl	8001a24 <Green_2>
				pedsGreen();
 8000ac8:	f001 f812 	bl	8001af0 <pedsGreen>
				status=AUTO_RED_GREEN;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <automatic_run+0x1c8>)
 8000ace:	2202      	movs	r2, #2
 8000ad0:	601a      	str	r2, [r3, #0]
				pedsStatus = PED_GREEN;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <automatic_run+0x1cc>)
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	601a      	str	r2, [r3, #0]
			}
			UART_display();
 8000ad8:	f001 f832 	bl	8001b40 <UART_display>
		}

		if(isButtonPressed(1)){
 8000adc:	2001      	movs	r0, #1
 8000ade:	f000 f81f 	bl	8000b20 <isButtonPressed>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d008      	beq.n	8000afa <automatic_run+0x1c2>
			autoClickButton1();
 8000ae8:	f001 fa70 	bl	8001fcc <autoClickButton1>
			break;
 8000aec:	e006      	b.n	8000afc <automatic_run+0x1c4>
		break;
 8000aee:	bf00      	nop
 8000af0:	e004      	b.n	8000afc <automatic_run+0x1c4>
		break;
 8000af2:	bf00      	nop
 8000af4:	e002      	b.n	8000afc <automatic_run+0x1c4>
		break;
 8000af6:	bf00      	nop
 8000af8:	e000      	b.n	8000afc <automatic_run+0x1c4>
		}
		break;
 8000afa:	bf00      	nop
	}

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000114 	.word	0x20000114
 8000b04:	20000118 	.word	0x20000118
 8000b08:	20000010 	.word	0x20000010
 8000b0c:	2000011c 	.word	0x2000011c
 8000b10:	20000134 	.word	0x20000134
 8000b14:	20000024 	.word	0x20000024
 8000b18:	20000014 	.word	0x20000014
 8000b1c:	20000018 	.word	0x20000018

08000b20 <isButtonPressed>:

static int counterForButtonPressed[NO_OF_BUTTONS];

static int button_flag[NO_OF_BUTTONS];

int isButtonPressed(int index){
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000b28:	4a09      	ldr	r2, [pc, #36]	; (8000b50 <isButtonPressed+0x30>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d106      	bne.n	8000b42 <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000b34:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <isButtonPressed+0x30>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e000      	b.n	8000b44 <isButtonPressed+0x24>
	}
	return 0;
 8000b42:	2300      	movs	r3, #0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000104 	.word	0x20000104

08000b54 <button_process>:

void button_process(int index){
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < NO_OF_BUTTONS){
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	db07      	blt.n	8000b72 <button_process+0x1e>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	dc04      	bgt.n	8000b72 <button_process+0x1e>
		button_flag[index] = 1;
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <button_process+0x28>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	20000104 	.word	0x20000104

08000b80 <button_reading>:

void button_reading(){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
	for(uint8_t i = 0 ; i < NO_OF_BUTTONS; i++){
 8000b86:	2300      	movs	r3, #0
 8000b88:	71fb      	strb	r3, [r7, #7]
 8000b8a:	e0e5      	b.n	8000d58 <button_reading+0x1d8>

		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000b8c:	79fa      	ldrb	r2, [r7, #7]
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	4976      	ldr	r1, [pc, #472]	; (8000d6c <button_reading+0x1ec>)
 8000b92:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b96:	4976      	ldr	r1, [pc, #472]	; (8000d70 <button_reading+0x1f0>)
 8000b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000b9c:	79fa      	ldrb	r2, [r7, #7]
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	4974      	ldr	r1, [pc, #464]	; (8000d74 <button_reading+0x1f4>)
 8000ba2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ba6:	4971      	ldr	r1, [pc, #452]	; (8000d6c <button_reading+0x1ec>)
 8000ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		if(i == 0) debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(PedestrianButton_GPIO_Port, PedestrianButton_Pin);
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d10b      	bne.n	8000bca <button_reading+0x4a>
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4870      	ldr	r0, [pc, #448]	; (8000d78 <button_reading+0x1f8>)
 8000bb6:	f001 fe5f 	bl	8002878 <HAL_GPIO_ReadPin>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	4a6c      	ldr	r2, [pc, #432]	; (8000d74 <button_reading+0x1f4>)
 8000bc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000bc8:	e02b      	b.n	8000c22 <button_reading+0xa2>
		else if(i == 1) debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d10b      	bne.n	8000be8 <button_reading+0x68>
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	4869      	ldr	r0, [pc, #420]	; (8000d78 <button_reading+0x1f8>)
 8000bd4:	f001 fe50 	bl	8002878 <HAL_GPIO_ReadPin>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	461a      	mov	r2, r3
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	4611      	mov	r1, r2
 8000be0:	4a64      	ldr	r2, [pc, #400]	; (8000d74 <button_reading+0x1f4>)
 8000be2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000be6:	e01c      	b.n	8000c22 <button_reading+0xa2>
		else if(i == 2) debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d10b      	bne.n	8000c06 <button_reading+0x86>
 8000bee:	2110      	movs	r1, #16
 8000bf0:	4861      	ldr	r0, [pc, #388]	; (8000d78 <button_reading+0x1f8>)
 8000bf2:	f001 fe41 	bl	8002878 <HAL_GPIO_ReadPin>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4a5d      	ldr	r2, [pc, #372]	; (8000d74 <button_reading+0x1f4>)
 8000c00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c04:	e00d      	b.n	8000c22 <button_reading+0xa2>
		else if(i == 3) debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2b03      	cmp	r3, #3
 8000c0a:	d10a      	bne.n	8000c22 <button_reading+0xa2>
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	485b      	ldr	r0, [pc, #364]	; (8000d7c <button_reading+0x1fc>)
 8000c10:	f001 fe32 	bl	8002878 <HAL_GPIO_ReadPin>
 8000c14:	4603      	mov	r3, r0
 8000c16:	461a      	mov	r2, r3
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4a55      	ldr	r2, [pc, #340]	; (8000d74 <button_reading+0x1f4>)
 8000c1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		if((debounceButtonBuffer3[i] == debounceButtonBuffer2[i]) && debounceButtonBuffer2[i] == debounceButtonBuffer1[i]){
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	4a52      	ldr	r2, [pc, #328]	; (8000d70 <button_reading+0x1f0>)
 8000c26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	494f      	ldr	r1, [pc, #316]	; (8000d6c <button_reading+0x1ec>)
 8000c2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	f040 8084 	bne.w	8000d40 <button_reading+0x1c0>
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	4a4c      	ldr	r2, [pc, #304]	; (8000d6c <button_reading+0x1ec>)
 8000c3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	494c      	ldr	r1, [pc, #304]	; (8000d74 <button_reading+0x1f4>)
 8000c44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d179      	bne.n	8000d40 <button_reading+0x1c0>
			button_buffer[i] = debounceButtonBuffer3[i];
 8000c4c:	79fa      	ldrb	r2, [r7, #7]
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	4947      	ldr	r1, [pc, #284]	; (8000d70 <button_reading+0x1f0>)
 8000c52:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c56:	494a      	ldr	r1, [pc, #296]	; (8000d80 <button_reading+0x200>)
 8000c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			switch(buttonState[i]){
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	4a49      	ldr	r2, [pc, #292]	; (8000d84 <button_reading+0x204>)
 8000c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c64:	2b0d      	cmp	r3, #13
 8000c66:	d043      	beq.n	8000cf0 <button_reading+0x170>
 8000c68:	2b0d      	cmp	r3, #13
 8000c6a:	dc6b      	bgt.n	8000d44 <button_reading+0x1c4>
 8000c6c:	2b0b      	cmp	r3, #11
 8000c6e:	d002      	beq.n	8000c76 <button_reading+0xf6>
 8000c70:	2b0c      	cmp	r3, #12
 8000c72:	d02d      	beq.n	8000cd0 <button_reading+0x150>
					buttonState[i] = BUTTON_IS_RELEASED;
					counterForButtonPressed[i] = 0;
				}
				break;
			default:
				break;
 8000c74:	e066      	b.n	8000d44 <button_reading+0x1c4>
				counterForButtonPressed[i]++;
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	4a43      	ldr	r2, [pc, #268]	; (8000d88 <button_reading+0x208>)
 8000c7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c7e:	3201      	adds	r2, #1
 8000c80:	4941      	ldr	r1, [pc, #260]	; (8000d88 <button_reading+0x208>)
 8000c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counterForButtonPressed[i] == TIME_OUT_FOR_LONG_KEY_PRESSED/TIMER_CYCLE){
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	4a3f      	ldr	r2, [pc, #252]	; (8000d88 <button_reading+0x208>)
 8000c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8e:	2b64      	cmp	r3, #100	; 0x64
 8000c90:	d10d      	bne.n	8000cae <button_reading+0x12e>
					buttonState[i] = BUTTON_IS_LONG_PRESSED;
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	4a3b      	ldr	r2, [pc, #236]	; (8000d84 <button_reading+0x204>)
 8000c96:	210d      	movs	r1, #13
 8000c98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counterForButtonPressed[i] = 0;
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	4a3a      	ldr	r2, [pc, #232]	; (8000d88 <button_reading+0x208>)
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_process(i);
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff53 	bl	8000b54 <button_process>
				if(button_buffer[i] == RELEASED_STATE){
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	4a33      	ldr	r2, [pc, #204]	; (8000d80 <button_reading+0x200>)
 8000cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d146      	bne.n	8000d48 <button_reading+0x1c8>
					buttonState[i] = BUTTON_IS_RELEASED;
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	4a31      	ldr	r2, [pc, #196]	; (8000d84 <button_reading+0x204>)
 8000cbe:	210c      	movs	r1, #12
 8000cc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counterForButtonPressed[i] = 0;
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4a30      	ldr	r2, [pc, #192]	; (8000d88 <button_reading+0x208>)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000cce:	e03b      	b.n	8000d48 <button_reading+0x1c8>
				if(button_buffer[i] == PRESSED_STATE){
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	4a2b      	ldr	r2, [pc, #172]	; (8000d80 <button_reading+0x200>)
 8000cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d137      	bne.n	8000d4c <button_reading+0x1cc>
					buttonState[i] = BUTTON_IS_PRESSED;
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	4a29      	ldr	r2, [pc, #164]	; (8000d84 <button_reading+0x204>)
 8000ce0:	210b      	movs	r1, #11
 8000ce2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_process(i);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff33 	bl	8000b54 <button_process>
				break;
 8000cee:	e02d      	b.n	8000d4c <button_reading+0x1cc>
				counterForButtonPressed[i]++;
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	4a25      	ldr	r2, [pc, #148]	; (8000d88 <button_reading+0x208>)
 8000cf4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cf8:	3201      	adds	r2, #1
 8000cfa:	4923      	ldr	r1, [pc, #140]	; (8000d88 <button_reading+0x208>)
 8000cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counterForButtonPressed[i] == TIME_OUT_FOR_KEY_PRESSED/TIMER_CYCLE){
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	4a21      	ldr	r2, [pc, #132]	; (8000d88 <button_reading+0x208>)
 8000d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d08:	2b14      	cmp	r3, #20
 8000d0a:	d108      	bne.n	8000d1e <button_reading+0x19e>
					button_process(i);
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff20 	bl	8000b54 <button_process>
					counterForButtonPressed[i] = 0;
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	4a1c      	ldr	r2, [pc, #112]	; (8000d88 <button_reading+0x208>)
 8000d18:	2100      	movs	r1, #0
 8000d1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if(button_buffer[i] == RELEASED_STATE){
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <button_reading+0x200>)
 8000d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d112      	bne.n	8000d50 <button_reading+0x1d0>
					buttonState[i] = BUTTON_IS_RELEASED;
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	4a15      	ldr	r2, [pc, #84]	; (8000d84 <button_reading+0x204>)
 8000d2e:	210c      	movs	r1, #12
 8000d30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counterForButtonPressed[i] = 0;
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <button_reading+0x208>)
 8000d38:	2100      	movs	r1, #0
 8000d3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000d3e:	e007      	b.n	8000d50 <button_reading+0x1d0>
			}
		}
 8000d40:	bf00      	nop
 8000d42:	e006      	b.n	8000d52 <button_reading+0x1d2>
				break;
 8000d44:	bf00      	nop
 8000d46:	e004      	b.n	8000d52 <button_reading+0x1d2>
				break;
 8000d48:	bf00      	nop
 8000d4a:	e002      	b.n	8000d52 <button_reading+0x1d2>
				break;
 8000d4c:	bf00      	nop
 8000d4e:	e000      	b.n	8000d52 <button_reading+0x1d2>
				break;
 8000d50:	bf00      	nop
	for(uint8_t i = 0 ; i < NO_OF_BUTTONS; i++){
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	3301      	adds	r3, #1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	f67f af16 	bls.w	8000b8c <button_reading+0xc>
	}
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200000d4 	.word	0x200000d4
 8000d70:	200000e4 	.word	0x200000e4
 8000d74:	200000c4 	.word	0x200000c4
 8000d78:	40010800 	.word	0x40010800
 8000d7c:	40010c00 	.word	0x40010c00
 8000d80:	200000b4 	.word	0x200000b4
 8000d84:	20000000 	.word	0x20000000
 8000d88:	200000f4 	.word	0x200000f4

08000d8c <configRed1>:
 *
 */

#include "configTraffic.h"

void configRed1(){
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
	redDuration1 = numberCounter;
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <configRed1+0x34>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <configRed1+0x38>)
 8000d96:	6013      	str	r3, [r2, #0]
	if(redDuration1 <= yellowDuration2) yellowDuration2 = 1;
 8000d98:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <configRed1+0x38>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <configRed1+0x3c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	dc02      	bgt.n	8000daa <configRed1+0x1e>
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <configRed1+0x3c>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	601a      	str	r2, [r3, #0]
	greenDuration2 = redDuration1 - yellowDuration2;
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <configRed1+0x38>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <configRed1+0x3c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <configRed1+0x40>)
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	2000011c 	.word	0x2000011c
 8000dc4:	20000010 	.word	0x20000010
 8000dc8:	20000024 	.word	0x20000024
 8000dcc:	20000020 	.word	0x20000020

08000dd0 <configGreen1>:


void configGreen1(){
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
	greenDuration1 = numberCounter;
 8000dd4:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <configGreen1+0x24>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <configGreen1+0x28>)
 8000dda:	6013      	str	r3, [r2, #0]
	yellowDuration1 = redDuration2 - greenDuration1;
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <configGreen1+0x2c>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <configGreen1+0x28>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <configGreen1+0x30>)
 8000de8:	6013      	str	r3, [r2, #0]
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	2000011c 	.word	0x2000011c
 8000df8:	20000014 	.word	0x20000014
 8000dfc:	2000001c 	.word	0x2000001c
 8000e00:	20000018 	.word	0x20000018

08000e04 <configYellow1>:

void configYellow1(){
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
	yellowDuration1 = numberCounter;
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <configYellow1+0x24>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <configYellow1+0x28>)
 8000e0e:	6013      	str	r3, [r2, #0]
	greenDuration1 = redDuration2 - yellowDuration1;
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <configYellow1+0x2c>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <configYellow1+0x28>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	4a06      	ldr	r2, [pc, #24]	; (8000e34 <configYellow1+0x30>)
 8000e1c:	6013      	str	r3, [r2, #0]
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	2000011c 	.word	0x2000011c
 8000e2c:	20000018 	.word	0x20000018
 8000e30:	2000001c 	.word	0x2000001c
 8000e34:	20000014 	.word	0x20000014

08000e38 <configRed2>:

void configRed2(){
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
	redDuration2 = numberCounter;
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <configRed2+0x34>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <configRed2+0x38>)
 8000e42:	6013      	str	r3, [r2, #0]
	if(redDuration2 <= yellowDuration1) yellowDuration1 = 1;
 8000e44:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <configRed2+0x38>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <configRed2+0x3c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	dc02      	bgt.n	8000e56 <configRed2+0x1e>
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <configRed2+0x3c>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	601a      	str	r2, [r3, #0]
	greenDuration1 = redDuration2 - yellowDuration1;
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <configRed2+0x38>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <configRed2+0x3c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <configRed2+0x40>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	2000011c 	.word	0x2000011c
 8000e70:	2000001c 	.word	0x2000001c
 8000e74:	20000018 	.word	0x20000018
 8000e78:	20000014 	.word	0x20000014

08000e7c <configGreen2>:

void configGreen2(){
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
	greenDuration2 = numberCounter;
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <configGreen2+0x24>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <configGreen2+0x28>)
 8000e86:	6013      	str	r3, [r2, #0]
	yellowDuration2 = redDuration1 - greenDuration2;
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <configGreen2+0x2c>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <configGreen2+0x28>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	4a06      	ldr	r2, [pc, #24]	; (8000eac <configGreen2+0x30>)
 8000e94:	6013      	str	r3, [r2, #0]
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	2000011c 	.word	0x2000011c
 8000ea4:	20000020 	.word	0x20000020
 8000ea8:	20000010 	.word	0x20000010
 8000eac:	20000024 	.word	0x20000024

08000eb0 <configYellow2>:

void configYellow2(){
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
	yellowDuration2 = numberCounter;
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <configYellow2+0x24>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <configYellow2+0x28>)
 8000eba:	6013      	str	r3, [r2, #0]
	greenDuration2 = redDuration1 - yellowDuration2;
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <configYellow2+0x2c>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <configYellow2+0x28>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <configYellow2+0x30>)
 8000ec8:	6013      	str	r3, [r2, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	2000011c 	.word	0x2000011c
 8000ed8:	20000024 	.word	0x20000024
 8000edc:	20000010 	.word	0x20000010
 8000ee0:	20000020 	.word	0x20000020

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee8:	f001 f922 	bl	8002130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eec:	f000 f826 	bl	8000f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f000 f952 	bl	8001198 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ef4:	f000 f864 	bl	8000fc0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000ef8:	f000 f924 	bl	8001144 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000efc:	f000 f8ac 	bl	8001058 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//  SCH_Add_Task(test_IO, 10, 10);
  HAL_TIM_Base_Start_IT(&htim2);
 8000f00:	480a      	ldr	r0, [pc, #40]	; (8000f2c <main+0x48>)
 8000f02:	f002 f96b 	bl	80031dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f06:	2100      	movs	r1, #0
 8000f08:	4809      	ldr	r0, [pc, #36]	; (8000f30 <main+0x4c>)
 8000f0a:	f002 fa11 	bl	8003330 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <main+0x50>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	601a      	str	r2, [r3, #0]
  pedsStatus = NO_PED;
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <main+0x54>)
 8000f16:	2202      	movs	r2, #2
 8000f18:	601a      	str	r2, [r3, #0]

  while (1)
  {
	  automatic_run();
 8000f1a:	f7ff fd0d 	bl	8000938 <automatic_run>
	  manual_run();
 8000f1e:	f000 f9bb 	bl	8001298 <manual_run>
	  tuning_run();
 8000f22:	f000 fe43 	bl	8001bac <tuning_run>
	  pedestrian_run();
 8000f26:	f000 fa85 	bl	8001434 <pedestrian_run>
	  automatic_run();
 8000f2a:	e7f6      	b.n	8000f1a <main+0x36>
 8000f2c:	2000019c 	.word	0x2000019c
 8000f30:	20000154 	.word	0x20000154
 8000f34:	20000114 	.word	0x20000114
 8000f38:	20000118 	.word	0x20000118

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b090      	sub	sp, #64	; 0x40
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 0318 	add.w	r3, r7, #24
 8000f46:	2228      	movs	r2, #40	; 0x28
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f003 fd56 	bl	80049fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f62:	2301      	movs	r3, #1
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f66:	2310      	movs	r3, #16
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f72:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f78:	f107 0318 	add.w	r3, r7, #24
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f001 fcc3 	bl	8002908 <HAL_RCC_OscConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f88:	f000 f980 	bl	800128c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f90:	2302      	movs	r3, #2
 8000f92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2102      	movs	r1, #2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f001 ff30 	bl	8002e0c <HAL_RCC_ClockConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000fb2:	f000 f96b 	bl	800128c <Error_Handler>
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	3740      	adds	r7, #64	; 0x40
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc6:	f107 0308 	add.w	r3, r7, #8
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <MX_TIM2_Init+0x94>)
 8000fde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fe2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <MX_TIM2_Init+0x94>)
 8000fe6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000fea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <MX_TIM2_Init+0x94>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <MX_TIM2_Init+0x94>)
 8000ff4:	224f      	movs	r2, #79	; 0x4f
 8000ff6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <MX_TIM2_Init+0x94>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <MX_TIM2_Init+0x94>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001004:	4813      	ldr	r0, [pc, #76]	; (8001054 <MX_TIM2_Init+0x94>)
 8001006:	f002 f899 	bl	800313c <HAL_TIM_Base_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001010:	f000 f93c 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001018:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	4619      	mov	r1, r3
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <MX_TIM2_Init+0x94>)
 8001022:	f002 fbed 	bl	8003800 <HAL_TIM_ConfigClockSource>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800102c:	f000 f92e 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001030:	2300      	movs	r3, #0
 8001032:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001038:	463b      	mov	r3, r7
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_TIM2_Init+0x94>)
 800103e:	f002 ff6b 	bl	8003f18 <HAL_TIMEx_MasterConfigSynchronization>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001048:	f000 f920 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	2000019c 	.word	0x2000019c

08001058 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08e      	sub	sp, #56	; 0x38
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106c:	f107 0320 	add.w	r3, r7, #32
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
 8001084:	615a      	str	r2, [r3, #20]
 8001086:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001088:	4b2c      	ldr	r3, [pc, #176]	; (800113c <MX_TIM3_Init+0xe4>)
 800108a:	4a2d      	ldr	r2, [pc, #180]	; (8001140 <MX_TIM3_Init+0xe8>)
 800108c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 800108e:	4b2b      	ldr	r3, [pc, #172]	; (800113c <MX_TIM3_Init+0xe4>)
 8001090:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001094:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001096:	4b29      	ldr	r3, [pc, #164]	; (800113c <MX_TIM3_Init+0xe4>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63;
 800109c:	4b27      	ldr	r3, [pc, #156]	; (800113c <MX_TIM3_Init+0xe4>)
 800109e:	223f      	movs	r2, #63	; 0x3f
 80010a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a2:	4b26      	ldr	r3, [pc, #152]	; (800113c <MX_TIM3_Init+0xe4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <MX_TIM3_Init+0xe4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010ae:	4823      	ldr	r0, [pc, #140]	; (800113c <MX_TIM3_Init+0xe4>)
 80010b0:	f002 f844 	bl	800313c <HAL_TIM_Base_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80010ba:	f000 f8e7 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010c8:	4619      	mov	r1, r3
 80010ca:	481c      	ldr	r0, [pc, #112]	; (800113c <MX_TIM3_Init+0xe4>)
 80010cc:	f002 fb98 	bl	8003800 <HAL_TIM_ConfigClockSource>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80010d6:	f000 f8d9 	bl	800128c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010da:	4818      	ldr	r0, [pc, #96]	; (800113c <MX_TIM3_Init+0xe4>)
 80010dc:	f002 f8d0 	bl	8003280 <HAL_TIM_PWM_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80010e6:	f000 f8d1 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	4619      	mov	r1, r3
 80010f8:	4810      	ldr	r0, [pc, #64]	; (800113c <MX_TIM3_Init+0xe4>)
 80010fa:	f002 ff0d 	bl	8003f18 <HAL_TIMEx_MasterConfigSynchronization>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001104:	f000 f8c2 	bl	800128c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001108:	2360      	movs	r3, #96	; 0x60
 800110a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2200      	movs	r2, #0
 800111c:	4619      	mov	r1, r3
 800111e:	4807      	ldr	r0, [pc, #28]	; (800113c <MX_TIM3_Init+0xe4>)
 8001120:	f002 fab0 	bl	8003684 <HAL_TIM_PWM_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800112a:	f000 f8af 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800112e:	4803      	ldr	r0, [pc, #12]	; (800113c <MX_TIM3_Init+0xe4>)
 8001130:	f000 faaa 	bl	8001688 <HAL_TIM_MspPostInit>

}
 8001134:	bf00      	nop
 8001136:	3738      	adds	r7, #56	; 0x38
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000154 	.word	0x20000154
 8001140:	40000400 	.word	0x40000400

08001144 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <MX_USART2_UART_Init+0x50>)
 800114c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 8001150:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001154:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 800116a:	220c      	movs	r2, #12
 800116c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_USART2_UART_Init+0x4c>)
 800117c:	f002 ff3c 	bl	8003ff8 <HAL_UART_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001186:	f000 f881 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200001e4 	.word	0x200001e4
 8001194:	40004400 	.word	0x40004400

08001198 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a2d      	ldr	r2, [pc, #180]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c4:	4b28      	ldr	r3, [pc, #160]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a27      	ldr	r2, [pc, #156]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011ca:	f043 0308 	orr.w	r3, r3, #8
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b25      	ldr	r3, [pc, #148]	; (8001268 <MX_GPIO_Init+0xd0>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0308 	and.w	r3, r3, #8
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PedestrianLight_0_Pin|TL1_1_Pin|TL2_1_Pin|TL2_0_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80011e2:	4822      	ldr	r0, [pc, #136]	; (800126c <MX_GPIO_Init+0xd4>)
 80011e4:	f001 fb5f 	bl	80028a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PedestrianLight_1_Pin|TL1_0_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80011ee:	4820      	ldr	r0, [pc, #128]	; (8001270 <MX_GPIO_Init+0xd8>)
 80011f0:	f001 fb59 	bl	80028a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PedestrianButton_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = PedestrianButton_Pin|Button1_Pin|Button2_Pin;
 80011f4:	2313      	movs	r3, #19
 80011f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	4619      	mov	r1, r3
 8001206:	481a      	ldr	r0, [pc, #104]	; (8001270 <MX_GPIO_Init+0xd8>)
 8001208:	f001 f9b2 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 800120c:	2301      	movs	r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	4619      	mov	r1, r3
 800121e:	4813      	ldr	r0, [pc, #76]	; (800126c <MX_GPIO_Init+0xd4>)
 8001220:	f001 f9a6 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PedestrianLight_0_Pin TL1_1_Pin TL2_1_Pin TL2_0_Pin */
  GPIO_InitStruct.Pin = PedestrianLight_0_Pin|TL1_1_Pin|TL2_1_Pin|TL2_0_Pin;
 8001224:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001228:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2302      	movs	r3, #2
 8001234:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 0308 	add.w	r3, r7, #8
 800123a:	4619      	mov	r1, r3
 800123c:	480b      	ldr	r0, [pc, #44]	; (800126c <MX_GPIO_Init+0xd4>)
 800123e:	f001 f997 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PedestrianLight_1_Pin TL1_0_Pin */
  GPIO_InitStruct.Pin = PedestrianLight_1_Pin|TL1_0_Pin;
 8001242:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001246:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001248:	2301      	movs	r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2302      	movs	r3, #2
 8001252:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	4619      	mov	r1, r3
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_GPIO_Init+0xd8>)
 800125c:	f001 f988 	bl	8002570 <HAL_GPIO_Init>

}
 8001260:	bf00      	nop
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40021000 	.word	0x40021000
 800126c:	40010c00 	.word	0x40010c00
 8001270:	40010800 	.word	0x40010800

08001274 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	timer_run();
 800127c:	f000 fb1c 	bl	80018b8 <timer_run>
	button_reading();
 8001280:	f7ff fc7e 	bl	8000b80 <button_reading>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001294:	e7fe      	b.n	8001294 <Error_Handler+0x8>
	...

08001298 <manual_run>:
    */
#include "manual_fsm.h"



void manual_run(){
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	switch (status) {
 800129c:	4b62      	ldr	r3, [pc, #392]	; (8001428 <manual_run+0x190>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3b0b      	subs	r3, #11
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	f200 80b5 	bhi.w	8001412 <manual_run+0x17a>
 80012a8:	a201      	add	r2, pc, #4	; (adr r2, 80012b0 <manual_run+0x18>)
 80012aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ae:	bf00      	nop
 80012b0:	080012c1 	.word	0x080012c1
 80012b4:	08001317 	.word	0x08001317
 80012b8:	0800136b 	.word	0x0800136b
 80012bc:	080013bf 	.word	0x080013bf
		case MAN_RED_GREEN:
			isButtonPressed(3);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f7ff fc2d 	bl	8000b20 <isButtonPressed>
			if(timer1_flag == 1) {
 80012c6:	4b59      	ldr	r3, [pc, #356]	; (800142c <manual_run+0x194>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d102      	bne.n	80012d4 <manual_run+0x3c>
				status = INIT;
 80012ce:	4b56      	ldr	r3, [pc, #344]	; (8001428 <manual_run+0x190>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	601a      	str	r2, [r3, #0]
			}

			if(isButtonPressed(1)){
 80012d4:	2001      	movs	r0, #1
 80012d6:	f7ff fc23 	bl	8000b20 <isButtonPressed>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <manual_run+0x4e>
				manualClickButton1();
 80012e0:	f000 fe9a 	bl	8002018 <manualClickButton1>
				break;
 80012e4:	e09e      	b.n	8001424 <manual_run+0x18c>
			}

			if (isButtonPressed(2)) {
 80012e6:	2002      	movs	r0, #2
 80012e8:	f7ff fc1a 	bl	8000b20 <isButtonPressed>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 8091 	beq.w	8001416 <manual_run+0x17e>
				status = MAN_RED_YELLOW;
 80012f4:	4b4c      	ldr	r3, [pc, #304]	; (8001428 <manual_run+0x190>)
 80012f6:	220c      	movs	r2, #12
 80012f8:	601a      	str	r2, [r3, #0]
				Red_1();
 80012fa:	f000 fb0b 	bl	8001914 <Red_1>
				Yellow_2();
 80012fe:	f000 fba1 	bl	8001a44 <Yellow_2>
				pedsGreen();
 8001302:	f000 fbf5 	bl	8001af0 <pedsGreen>
				setTimer1(10000);
 8001306:	f242 7010 	movw	r0, #10000	; 0x2710
 800130a:	f000 fab9 	bl	8001880 <setTimer1>
				pedsStatus = PED_GREEN;
 800130e:	4b48      	ldr	r3, [pc, #288]	; (8001430 <manual_run+0x198>)
 8001310:	2204      	movs	r2, #4
 8001312:	601a      	str	r2, [r3, #0]
			}
			break;
 8001314:	e07f      	b.n	8001416 <manual_run+0x17e>

		case MAN_RED_YELLOW:
			isButtonPressed(3);
 8001316:	2003      	movs	r0, #3
 8001318:	f7ff fc02 	bl	8000b20 <isButtonPressed>
			if(timer1_flag) {
 800131c:	4b43      	ldr	r3, [pc, #268]	; (800142c <manual_run+0x194>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <manual_run+0x92>
				status = INIT;
 8001324:	4b40      	ldr	r3, [pc, #256]	; (8001428 <manual_run+0x190>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]
			}

			if(isButtonPressed(1)) {
 800132a:	2001      	movs	r0, #1
 800132c:	f7ff fbf8 	bl	8000b20 <isButtonPressed>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <manual_run+0xa4>
				manualClickButton1();
 8001336:	f000 fe6f 	bl	8002018 <manualClickButton1>
				break;
 800133a:	e073      	b.n	8001424 <manual_run+0x18c>
			}

			if (isButtonPressed(2)) {
 800133c:	2002      	movs	r0, #2
 800133e:	f7ff fbef 	bl	8000b20 <isButtonPressed>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d068      	beq.n	800141a <manual_run+0x182>
				status = MAN_GREEN_RED;
 8001348:	4b37      	ldr	r3, [pc, #220]	; (8001428 <manual_run+0x190>)
 800134a:	220d      	movs	r2, #13
 800134c:	601a      	str	r2, [r3, #0]
				Green_1();
 800134e:	f000 faf5 	bl	800193c <Green_1>
				Red_2();
 8001352:	f000 fb57 	bl	8001a04 <Red_2>
				pedsRed();
 8001356:	f000 fbb7 	bl	8001ac8 <pedsRed>
				pedsStatus = PED_RED;
 800135a:	4b35      	ldr	r3, [pc, #212]	; (8001430 <manual_run+0x198>)
 800135c:	2203      	movs	r2, #3
 800135e:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8001360:	f242 7010 	movw	r0, #10000	; 0x2710
 8001364:	f000 fa8c 	bl	8001880 <setTimer1>
			}
			break;
 8001368:	e057      	b.n	800141a <manual_run+0x182>

		case MAN_GREEN_RED:
			isButtonPressed(3);
 800136a:	2003      	movs	r0, #3
 800136c:	f7ff fbd8 	bl	8000b20 <isButtonPressed>
			if(timer1_flag) {
 8001370:	4b2e      	ldr	r3, [pc, #184]	; (800142c <manual_run+0x194>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <manual_run+0xe6>
				status = INIT;
 8001378:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <manual_run+0x190>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]
			}

			if(isButtonPressed(1)) {
 800137e:	2001      	movs	r0, #1
 8001380:	f7ff fbce 	bl	8000b20 <isButtonPressed>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d002      	beq.n	8001390 <manual_run+0xf8>
				manualClickButton1();
 800138a:	f000 fe45 	bl	8002018 <manualClickButton1>
				break;
 800138e:	e049      	b.n	8001424 <manual_run+0x18c>
			}

			if (isButtonPressed(2)) {
 8001390:	2002      	movs	r0, #2
 8001392:	f7ff fbc5 	bl	8000b20 <isButtonPressed>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d040      	beq.n	800141e <manual_run+0x186>
				status = MAN_YELLOW_RED;
 800139c:	4b22      	ldr	r3, [pc, #136]	; (8001428 <manual_run+0x190>)
 800139e:	220e      	movs	r2, #14
 80013a0:	601a      	str	r2, [r3, #0]
				Yellow_1();
 80013a2:	f000 fadf 	bl	8001964 <Yellow_1>
				Red_2();
 80013a6:	f000 fb2d 	bl	8001a04 <Red_2>
				pedsRed();
 80013aa:	f000 fb8d 	bl	8001ac8 <pedsRed>
				pedsStatus = PED_RED;
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <manual_run+0x198>)
 80013b0:	2203      	movs	r2, #3
 80013b2:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 80013b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80013b8:	f000 fa62 	bl	8001880 <setTimer1>
			}

			break;
 80013bc:	e02f      	b.n	800141e <manual_run+0x186>

		case MAN_YELLOW_RED:
			isButtonPressed(3);
 80013be:	2003      	movs	r0, #3
 80013c0:	f7ff fbae 	bl	8000b20 <isButtonPressed>
			if(timer1_flag) {
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <manual_run+0x194>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d002      	beq.n	80013d2 <manual_run+0x13a>
				status = INIT;
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <manual_run+0x190>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	601a      	str	r2, [r3, #0]
			}

			if(isButtonPressed(1)) {
 80013d2:	2001      	movs	r0, #1
 80013d4:	f7ff fba4 	bl	8000b20 <isButtonPressed>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <manual_run+0x14c>
				manualClickButton1();
 80013de:	f000 fe1b 	bl	8002018 <manualClickButton1>
				break;
 80013e2:	e01f      	b.n	8001424 <manual_run+0x18c>
			}

			if (isButtonPressed(2)) {
 80013e4:	2002      	movs	r0, #2
 80013e6:	f7ff fb9b 	bl	8000b20 <isButtonPressed>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d018      	beq.n	8001422 <manual_run+0x18a>
				status = MAN_RED_GREEN;
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <manual_run+0x190>)
 80013f2:	220b      	movs	r2, #11
 80013f4:	601a      	str	r2, [r3, #0]
				Red_1();
 80013f6:	f000 fa8d 	bl	8001914 <Red_1>
				Green_2();
 80013fa:	f000 fb13 	bl	8001a24 <Green_2>
				pedsGreen();
 80013fe:	f000 fb77 	bl	8001af0 <pedsGreen>
				pedsStatus = PED_GREEN;
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <manual_run+0x198>)
 8001404:	2204      	movs	r2, #4
 8001406:	601a      	str	r2, [r3, #0]
				setTimer1(10000);
 8001408:	f242 7010 	movw	r0, #10000	; 0x2710
 800140c:	f000 fa38 	bl	8001880 <setTimer1>
			}


			break;
 8001410:	e007      	b.n	8001422 <manual_run+0x18a>
		default:
			break;
 8001412:	bf00      	nop
 8001414:	e006      	b.n	8001424 <manual_run+0x18c>
			break;
 8001416:	bf00      	nop
 8001418:	e004      	b.n	8001424 <manual_run+0x18c>
			break;
 800141a:	bf00      	nop
 800141c:	e002      	b.n	8001424 <manual_run+0x18c>
			break;
 800141e:	bf00      	nop
 8001420:	e000      	b.n	8001424 <manual_run+0x18c>
			break;
 8001422:	bf00      	nop
	}
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000114 	.word	0x20000114
 800142c:	20000134 	.word	0x20000134
 8001430:	20000118 	.word	0x20000118

08001434 <pedestrian_run>:

#include "pedestrian_fsm.h"

int magnitude = 0;

void pedestrian_run(){
 8001434:	b5b0      	push	{r4, r5, r7, lr}
 8001436:	af00      	add	r7, sp, #0
	switch(pedsStatus) {
 8001438:	4b57      	ldr	r3, [pc, #348]	; (8001598 <pedestrian_run+0x164>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b04      	cmp	r3, #4
 800143e:	d034      	beq.n	80014aa <pedestrian_run+0x76>
 8001440:	2b04      	cmp	r3, #4
 8001442:	f300 80a3 	bgt.w	800158c <pedestrian_run+0x158>
 8001446:	2b02      	cmp	r3, #2
 8001448:	d002      	beq.n	8001450 <pedestrian_run+0x1c>
 800144a:	2b03      	cmp	r3, #3
 800144c:	d007      	beq.n	800145e <pedestrian_run+0x2a>

			}
		}
		break;
	default:
		break;
 800144e:	e09d      	b.n	800158c <pedestrian_run+0x158>
		turnOffPeds();
 8001450:	f000 fb62 	bl	8001b18 <turnOffPeds>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,0);
 8001454:	4b51      	ldr	r3, [pc, #324]	; (800159c <pedestrian_run+0x168>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800145c:	e099      	b.n	8001592 <pedestrian_run+0x15e>
		if(status == SETTING_GREEN1 || status == SETTING_GREEN2 || status == SETTING_YELLOW2 || status == SETTING_YELLOW1 || status == SETTING_RED2 || status == SETTING_RED1) {
 800145e:	4b50      	ldr	r3, [pc, #320]	; (80015a0 <pedestrian_run+0x16c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b16      	cmp	r3, #22
 8001464:	d013      	beq.n	800148e <pedestrian_run+0x5a>
 8001466:	4b4e      	ldr	r3, [pc, #312]	; (80015a0 <pedestrian_run+0x16c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b17      	cmp	r3, #23
 800146c:	d00f      	beq.n	800148e <pedestrian_run+0x5a>
 800146e:	4b4c      	ldr	r3, [pc, #304]	; (80015a0 <pedestrian_run+0x16c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b19      	cmp	r3, #25
 8001474:	d00b      	beq.n	800148e <pedestrian_run+0x5a>
 8001476:	4b4a      	ldr	r3, [pc, #296]	; (80015a0 <pedestrian_run+0x16c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b18      	cmp	r3, #24
 800147c:	d007      	beq.n	800148e <pedestrian_run+0x5a>
 800147e:	4b48      	ldr	r3, [pc, #288]	; (80015a0 <pedestrian_run+0x16c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b15      	cmp	r3, #21
 8001484:	d003      	beq.n	800148e <pedestrian_run+0x5a>
 8001486:	4b46      	ldr	r3, [pc, #280]	; (80015a0 <pedestrian_run+0x16c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b14      	cmp	r3, #20
 800148c:	d106      	bne.n	800149c <pedestrian_run+0x68>
			turnOffPeds();
 800148e:	f000 fb43 	bl	8001b18 <turnOffPeds>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,0);
 8001492:	4b42      	ldr	r3, [pc, #264]	; (800159c <pedestrian_run+0x168>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2200      	movs	r2, #0
 8001498:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800149a:	e07a      	b.n	8001592 <pedestrian_run+0x15e>
			pedsRed();
 800149c:	f000 fb14 	bl	8001ac8 <pedsRed>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,0);
 80014a0:	4b3e      	ldr	r3, [pc, #248]	; (800159c <pedestrian_run+0x168>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2200      	movs	r2, #0
 80014a6:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80014a8:	e073      	b.n	8001592 <pedestrian_run+0x15e>
		if(status == SETTING_GREEN1 || status == SETTING_GREEN2 || status == SETTING_YELLOW2 || status == SETTING_YELLOW1 || status == SETTING_RED2 || status == SETTING_RED1) {
 80014aa:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <pedestrian_run+0x16c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b16      	cmp	r3, #22
 80014b0:	d013      	beq.n	80014da <pedestrian_run+0xa6>
 80014b2:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <pedestrian_run+0x16c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b17      	cmp	r3, #23
 80014b8:	d00f      	beq.n	80014da <pedestrian_run+0xa6>
 80014ba:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <pedestrian_run+0x16c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b19      	cmp	r3, #25
 80014c0:	d00b      	beq.n	80014da <pedestrian_run+0xa6>
 80014c2:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <pedestrian_run+0x16c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b18      	cmp	r3, #24
 80014c8:	d007      	beq.n	80014da <pedestrian_run+0xa6>
 80014ca:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <pedestrian_run+0x16c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b15      	cmp	r3, #21
 80014d0:	d003      	beq.n	80014da <pedestrian_run+0xa6>
 80014d2:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <pedestrian_run+0x16c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b14      	cmp	r3, #20
 80014d8:	d106      	bne.n	80014e8 <pedestrian_run+0xb4>
			turnOffPeds();
 80014da:	f000 fb1d 	bl	8001b18 <turnOffPeds>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,0);
 80014de:	4b2f      	ldr	r3, [pc, #188]	; (800159c <pedestrian_run+0x168>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2200      	movs	r2, #0
 80014e4:	635a      	str	r2, [r3, #52]	; 0x34
 80014e6:	e050      	b.n	800158a <pedestrian_run+0x156>
		} else if(isButtonPressed(0)){
 80014e8:	2000      	movs	r0, #0
 80014ea:	f7ff fb19 	bl	8000b20 <isButtonPressed>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d04d      	beq.n	8001590 <pedestrian_run+0x15c>
			if(status == MAN_RED_GREEN || status == MAN_RED_YELLOW){
 80014f4:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <pedestrian_run+0x16c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b0b      	cmp	r3, #11
 80014fa:	d003      	beq.n	8001504 <pedestrian_run+0xd0>
 80014fc:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <pedestrian_run+0x16c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b0c      	cmp	r3, #12
 8001502:	d109      	bne.n	8001518 <pedestrian_run+0xe4>
				magnitude = 1000;
 8001504:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <pedestrian_run+0x170>)
 8001506:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800150a:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,magnitude);
 800150c:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <pedestrian_run+0x170>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b22      	ldr	r3, [pc, #136]	; (800159c <pedestrian_run+0x168>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	635a      	str	r2, [r3, #52]	; 0x34
 8001516:	e038      	b.n	800158a <pedestrian_run+0x156>
			} else if(status == AUTO_RED_GREEN || status == AUTO_RED_YELLOW){
 8001518:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <pedestrian_run+0x16c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d003      	beq.n	8001528 <pedestrian_run+0xf4>
 8001520:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <pedestrian_run+0x16c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b03      	cmp	r3, #3
 8001526:	d133      	bne.n	8001590 <pedestrian_run+0x15c>
				magnitude = 1000 - 1000*(numberCounter/(double)redDuration1);
 8001528:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <pedestrian_run+0x174>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ff5f 	bl	80003f0 <__aeabi_i2d>
 8001532:	4604      	mov	r4, r0
 8001534:	460d      	mov	r5, r1
 8001536:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <pedestrian_run+0x178>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7fe ff58 	bl	80003f0 <__aeabi_i2d>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4620      	mov	r0, r4
 8001546:	4629      	mov	r1, r5
 8001548:	f7ff f8e6 	bl	8000718 <__aeabi_ddiv>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <pedestrian_run+0x17c>)
 800155a:	f7fe ffb3 	bl	80004c4 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	f04f 0000 	mov.w	r0, #0
 8001566:	4912      	ldr	r1, [pc, #72]	; (80015b0 <pedestrian_run+0x17c>)
 8001568:	f7fe fdf4 	bl	8000154 <__aeabi_dsub>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f7ff f9b8 	bl	80008e8 <__aeabi_d2iz>
 8001578:	4603      	mov	r3, r0
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <pedestrian_run+0x170>)
 800157c:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,magnitude);
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <pedestrian_run+0x170>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <pedestrian_run+0x168>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001588:	e002      	b.n	8001590 <pedestrian_run+0x15c>
 800158a:	e001      	b.n	8001590 <pedestrian_run+0x15c>
		break;
 800158c:	bf00      	nop
 800158e:	e000      	b.n	8001592 <pedestrian_run+0x15e>
		break;
 8001590:	bf00      	nop
	}
}
 8001592:	bf00      	nop
 8001594:	bdb0      	pop	{r4, r5, r7, pc}
 8001596:	bf00      	nop
 8001598:	20000118 	.word	0x20000118
 800159c:	20000154 	.word	0x20000154
 80015a0:	20000114 	.word	0x20000114
 80015a4:	2000012c 	.word	0x2000012c
 80015a8:	2000011c 	.word	0x2000011c
 80015ac:	20000010 	.word	0x20000010
 80015b0:	408f4000 	.word	0x408f4000

080015b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_MspInit+0x5c>)
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	4a14      	ldr	r2, [pc, #80]	; (8001610 <HAL_MspInit+0x5c>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6193      	str	r3, [r2, #24]
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_MspInit+0x5c>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <HAL_MspInit+0x5c>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <HAL_MspInit+0x5c>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015dc:	61d3      	str	r3, [r2, #28]
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <HAL_MspInit+0x5c>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <HAL_MspInit+0x60>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_MspInit+0x60>)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	40021000 	.word	0x40021000
 8001614:	40010000 	.word	0x40010000

08001618 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001628:	d114      	bne.n	8001654 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_TIM_Base_MspInit+0x68>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	4a14      	ldr	r2, [pc, #80]	; (8001680 <HAL_TIM_Base_MspInit+0x68>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	61d3      	str	r3, [r2, #28]
 8001636:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_TIM_Base_MspInit+0x68>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	201c      	movs	r0, #28
 8001648:	f000 feab 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800164c:	201c      	movs	r0, #28
 800164e:	f000 fec4 	bl	80023da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001652:	e010      	b.n	8001676 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <HAL_TIM_Base_MspInit+0x6c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d10b      	bne.n	8001676 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_TIM_Base_MspInit+0x68>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	4a07      	ldr	r2, [pc, #28]	; (8001680 <HAL_TIM_Base_MspInit+0x68>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	61d3      	str	r3, [r2, #28]
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_TIM_Base_MspInit+0x68>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
}
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000
 8001684:	40000400 	.word	0x40000400

08001688 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <HAL_TIM_MspPostInit+0x58>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d117      	bne.n	80016d8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_TIM_MspPostInit+0x5c>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4a0d      	ldr	r2, [pc, #52]	; (80016e4 <HAL_TIM_MspPostInit+0x5c>)
 80016ae:	f043 0304 	orr.w	r3, r3, #4
 80016b2:	6193      	str	r3, [r2, #24]
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_TIM_MspPostInit+0x5c>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80016c0:	2340      	movs	r3, #64	; 0x40
 80016c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2302      	movs	r3, #2
 80016ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	4619      	mov	r1, r3
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <HAL_TIM_MspPostInit+0x60>)
 80016d4:	f000 ff4c 	bl	8002570 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016d8:	bf00      	nop
 80016da:	3720      	adds	r7, #32
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40000400 	.word	0x40000400
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40010800 	.word	0x40010800

080016ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 0310 	add.w	r3, r7, #16
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a1f      	ldr	r2, [pc, #124]	; (8001784 <HAL_UART_MspInit+0x98>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d137      	bne.n	800177c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800170c:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <HAL_UART_MspInit+0x9c>)
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	4a1d      	ldr	r2, [pc, #116]	; (8001788 <HAL_UART_MspInit+0x9c>)
 8001712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001716:	61d3      	str	r3, [r2, #28]
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <HAL_UART_MspInit+0x9c>)
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <HAL_UART_MspInit+0x9c>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	4a17      	ldr	r2, [pc, #92]	; (8001788 <HAL_UART_MspInit+0x9c>)
 800172a:	f043 0304 	orr.w	r3, r3, #4
 800172e:	6193      	str	r3, [r2, #24]
 8001730:	4b15      	ldr	r3, [pc, #84]	; (8001788 <HAL_UART_MspInit+0x9c>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800173c:	2304      	movs	r3, #4
 800173e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001744:	2303      	movs	r3, #3
 8001746:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	4619      	mov	r1, r3
 800174e:	480f      	ldr	r0, [pc, #60]	; (800178c <HAL_UART_MspInit+0xa0>)
 8001750:	f000 ff0e 	bl	8002570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001754:	2308      	movs	r3, #8
 8001756:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4619      	mov	r1, r3
 8001766:	4809      	ldr	r0, [pc, #36]	; (800178c <HAL_UART_MspInit+0xa0>)
 8001768:	f000 ff02 	bl	8002570 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	2100      	movs	r1, #0
 8001770:	2026      	movs	r0, #38	; 0x26
 8001772:	f000 fe16 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001776:	2026      	movs	r0, #38	; 0x26
 8001778:	f000 fe2f 	bl	80023da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800177c:	bf00      	nop
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40004400 	.word	0x40004400
 8001788:	40021000 	.word	0x40021000
 800178c:	40010800 	.word	0x40010800

08001790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <NMI_Handler+0x4>

08001796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <HardFault_Handler+0x4>

0800179c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <MemManage_Handler+0x4>

080017a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <BusFault_Handler+0x4>

080017a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <UsageFault_Handler+0x4>

080017ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d6:	f000 fcf1 	bl	80021bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <TIM2_IRQHandler+0x10>)
 80017e6:	f001 fe45 	bl	8003474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000019c 	.word	0x2000019c

080017f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <USART2_IRQHandler+0x10>)
 80017fa:	f002 fcdd 	bl	80041b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200001e4 	.word	0x200001e4

08001808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001810:	4a14      	ldr	r2, [pc, #80]	; (8001864 <_sbrk+0x5c>)
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <_sbrk+0x60>)
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d102      	bne.n	800182a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <_sbrk+0x64>)
 8001826:	4a12      	ldr	r2, [pc, #72]	; (8001870 <_sbrk+0x68>)
 8001828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <_sbrk+0x64>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	429a      	cmp	r2, r3
 8001836:	d207      	bcs.n	8001848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001838:	f003 f8b6 	bl	80049a8 <__errno>
 800183c:	4603      	mov	r3, r0
 800183e:	220c      	movs	r2, #12
 8001840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	e009      	b.n	800185c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <_sbrk+0x64>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <_sbrk+0x64>)
 8001858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185a:	68fb      	ldr	r3, [r7, #12]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20005000 	.word	0x20005000
 8001868:	00000400 	.word	0x00000400
 800186c:	20000130 	.word	0x20000130
 8001870:	20000230 	.word	0x20000230

08001874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <setTimer1>:
#include "timer.h"

int timer1_flag = 0, timer2_flag = 0;
int timer1_counter = 0, timer2_counter = 0;

void setTimer1(int duration){
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a08      	ldr	r2, [pc, #32]	; (80018ac <setTimer1+0x2c>)
 800188c:	fb82 1203 	smull	r1, r2, r2, r3
 8001890:	1092      	asrs	r2, r2, #2
 8001892:	17db      	asrs	r3, r3, #31
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	4a06      	ldr	r2, [pc, #24]	; (80018b0 <setTimer1+0x30>)
 8001898:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <setTimer1+0x34>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	66666667 	.word	0x66666667
 80018b0:	2000013c 	.word	0x2000013c
 80018b4:	20000134 	.word	0x20000134

080018b8 <timer_run>:
	timer2_flag = 0;
}



void timer_run(){
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <timer_run+0x4c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	dd0b      	ble.n	80018dc <timer_run+0x24>
		timer1_counter--;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <timer_run+0x4c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	4a0e      	ldr	r2, [pc, #56]	; (8001904 <timer_run+0x4c>)
 80018cc:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 80018ce:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <timer_run+0x4c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <timer_run+0x24>
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <timer_run+0x50>)
 80018d8:	2201      	movs	r2, #1
 80018da:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter > 0){
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <timer_run+0x54>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	dd0b      	ble.n	80018fc <timer_run+0x44>
		timer2_counter--;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <timer_run+0x54>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	4a08      	ldr	r2, [pc, #32]	; (800190c <timer_run+0x54>)
 80018ec:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <timer_run+0x54>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d102      	bne.n	80018fc <timer_run+0x44>
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <timer_run+0x58>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
	}

}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	2000013c 	.word	0x2000013c
 8001908:	20000134 	.word	0x20000134
 800190c:	20000140 	.word	0x20000140
 8001910:	20000138 	.word	0x20000138

08001914 <Red_1>:
 *      Author: HuyKiet
 */

#include "traffic1.h"

void Red_1(){
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1_0_GPIO_Port, TL1_0_Pin, GPIO_PIN_SET);
 8001918:	2201      	movs	r2, #1
 800191a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800191e:	4805      	ldr	r0, [pc, #20]	; (8001934 <Red_1+0x20>)
 8001920:	f000 ffc1 	bl	80028a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1_1_GPIO_Port, TL1_1_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	2108      	movs	r1, #8
 8001928:	4803      	ldr	r0, [pc, #12]	; (8001938 <Red_1+0x24>)
 800192a:	f000 ffbc 	bl	80028a6 <HAL_GPIO_WritePin>

}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40010800 	.word	0x40010800
 8001938:	40010c00 	.word	0x40010c00

0800193c <Green_1>:

void Green_1(){
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1_0_GPIO_Port, TL1_0_Pin, GPIO_PIN_RESET);
 8001940:	2200      	movs	r2, #0
 8001942:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <Green_1+0x20>)
 8001948:	f000 ffad 	bl	80028a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1_1_GPIO_Port, TL1_1_Pin, GPIO_PIN_SET);
 800194c:	2201      	movs	r2, #1
 800194e:	2108      	movs	r1, #8
 8001950:	4803      	ldr	r0, [pc, #12]	; (8001960 <Green_1+0x24>)
 8001952:	f000 ffa8 	bl	80028a6 <HAL_GPIO_WritePin>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40010800 	.word	0x40010800
 8001960:	40010c00 	.word	0x40010c00

08001964 <Yellow_1>:

void Yellow_1(){
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1_0_GPIO_Port, TL1_0_Pin, GPIO_PIN_SET);
 8001968:	2201      	movs	r2, #1
 800196a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800196e:	4805      	ldr	r0, [pc, #20]	; (8001984 <Yellow_1+0x20>)
 8001970:	f000 ff99 	bl	80028a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1_1_GPIO_Port, TL1_1_Pin, GPIO_PIN_SET);
 8001974:	2201      	movs	r2, #1
 8001976:	2108      	movs	r1, #8
 8001978:	4803      	ldr	r0, [pc, #12]	; (8001988 <Yellow_1+0x24>)
 800197a:	f000 ff94 	bl	80028a6 <HAL_GPIO_WritePin>
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40010800 	.word	0x40010800
 8001988:	40010c00 	.word	0x40010c00

0800198c <turnOffTraffic1>:

void turnOffTraffic1(){
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1_0_GPIO_Port, TL1_0_Pin, GPIO_PIN_RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001996:	4805      	ldr	r0, [pc, #20]	; (80019ac <turnOffTraffic1+0x20>)
 8001998:	f000 ff85 	bl	80028a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1_1_GPIO_Port, TL1_1_Pin, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	2108      	movs	r1, #8
 80019a0:	4803      	ldr	r0, [pc, #12]	; (80019b0 <turnOffTraffic1+0x24>)
 80019a2:	f000 ff80 	bl	80028a6 <HAL_GPIO_WritePin>
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40010800 	.word	0x40010800
 80019b0:	40010c00 	.word	0x40010c00

080019b4 <toggleRed1>:

void toggleRed1(){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	// Only use when led is clear or red.
	HAL_GPIO_TogglePin(TL1_0_GPIO_Port, TL1_0_Pin);
 80019b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <toggleRed1+0x14>)
 80019be:	f000 ff8a 	bl	80028d6 <HAL_GPIO_TogglePin>
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40010800 	.word	0x40010800

080019cc <toggleGreen1>:

void toggleGreen1(){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
	// Only use when led is clear or green.
	HAL_GPIO_TogglePin(TL1_1_GPIO_Port, TL1_1_Pin);
 80019d0:	2108      	movs	r1, #8
 80019d2:	4802      	ldr	r0, [pc, #8]	; (80019dc <toggleGreen1+0x10>)
 80019d4:	f000 ff7f 	bl	80028d6 <HAL_GPIO_TogglePin>
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40010c00 	.word	0x40010c00

080019e0 <toggleYellow1>:

void toggleYellow1(){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	// Only use when led is clear or yellow.
	HAL_GPIO_TogglePin(TL1_0_GPIO_Port, TL1_0_Pin);
 80019e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019e8:	4804      	ldr	r0, [pc, #16]	; (80019fc <toggleYellow1+0x1c>)
 80019ea:	f000 ff74 	bl	80028d6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(TL1_1_GPIO_Port, TL1_1_Pin);
 80019ee:	2108      	movs	r1, #8
 80019f0:	4803      	ldr	r0, [pc, #12]	; (8001a00 <toggleYellow1+0x20>)
 80019f2:	f000 ff70 	bl	80028d6 <HAL_GPIO_TogglePin>
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40010800 	.word	0x40010800
 8001a00:	40010c00 	.word	0x40010c00

08001a04 <Red_2>:
 */

#include "traffic2.h"


void Red_2(){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2_0_GPIO_Port, TL2_0_Pin, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	2120      	movs	r1, #32
 8001a0c:	4804      	ldr	r0, [pc, #16]	; (8001a20 <Red_2+0x1c>)
 8001a0e:	f000 ff4a 	bl	80028a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2_1_GPIO_Port, TL2_1_Pin, GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2110      	movs	r1, #16
 8001a16:	4802      	ldr	r0, [pc, #8]	; (8001a20 <Red_2+0x1c>)
 8001a18:	f000 ff45 	bl	80028a6 <HAL_GPIO_WritePin>
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40010c00 	.word	0x40010c00

08001a24 <Green_2>:


void Green_2(){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2_0_GPIO_Port, TL2_0_Pin, GPIO_PIN_RESET);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2120      	movs	r1, #32
 8001a2c:	4804      	ldr	r0, [pc, #16]	; (8001a40 <Green_2+0x1c>)
 8001a2e:	f000 ff3a 	bl	80028a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2_1_GPIO_Port, TL2_1_Pin, GPIO_PIN_SET);
 8001a32:	2201      	movs	r2, #1
 8001a34:	2110      	movs	r1, #16
 8001a36:	4802      	ldr	r0, [pc, #8]	; (8001a40 <Green_2+0x1c>)
 8001a38:	f000 ff35 	bl	80028a6 <HAL_GPIO_WritePin>
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40010c00 	.word	0x40010c00

08001a44 <Yellow_2>:

void Yellow_2(){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2_0_GPIO_Port, TL2_0_Pin, GPIO_PIN_SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	2120      	movs	r1, #32
 8001a4c:	4804      	ldr	r0, [pc, #16]	; (8001a60 <Yellow_2+0x1c>)
 8001a4e:	f000 ff2a 	bl	80028a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2_1_GPIO_Port, TL2_1_Pin, GPIO_PIN_SET);
 8001a52:	2201      	movs	r2, #1
 8001a54:	2110      	movs	r1, #16
 8001a56:	4802      	ldr	r0, [pc, #8]	; (8001a60 <Yellow_2+0x1c>)
 8001a58:	f000 ff25 	bl	80028a6 <HAL_GPIO_WritePin>
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40010c00 	.word	0x40010c00

08001a64 <turnOffTraffic2>:

void turnOffTraffic2(){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2_0_GPIO_Port, TL2_0_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2120      	movs	r1, #32
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <turnOffTraffic2+0x1c>)
 8001a6e:	f000 ff1a 	bl	80028a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2_1_GPIO_Port, TL2_1_Pin, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2110      	movs	r1, #16
 8001a76:	4802      	ldr	r0, [pc, #8]	; (8001a80 <turnOffTraffic2+0x1c>)
 8001a78:	f000 ff15 	bl	80028a6 <HAL_GPIO_WritePin>
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40010c00 	.word	0x40010c00

08001a84 <toggleRed2>:


void toggleRed2(){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	// Only use when led is clear or red.
	HAL_GPIO_TogglePin(TL2_0_GPIO_Port, TL2_0_Pin);
 8001a88:	2120      	movs	r1, #32
 8001a8a:	4802      	ldr	r0, [pc, #8]	; (8001a94 <toggleRed2+0x10>)
 8001a8c:	f000 ff23 	bl	80028d6 <HAL_GPIO_TogglePin>
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40010c00 	.word	0x40010c00

08001a98 <toggleGreen2>:

void toggleGreen2(){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	// Only use when led is clear or green.
	HAL_GPIO_TogglePin(TL2_1_GPIO_Port, TL2_1_Pin);
 8001a9c:	2110      	movs	r1, #16
 8001a9e:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <toggleGreen2+0x10>)
 8001aa0:	f000 ff19 	bl	80028d6 <HAL_GPIO_TogglePin>
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40010c00 	.word	0x40010c00

08001aac <toggleYellow2>:


void toggleYellow2(){
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	// Only use when led is clear or yellow.
	HAL_GPIO_TogglePin(TL2_0_GPIO_Port, TL2_0_Pin);
 8001ab0:	2120      	movs	r1, #32
 8001ab2:	4804      	ldr	r0, [pc, #16]	; (8001ac4 <toggleYellow2+0x18>)
 8001ab4:	f000 ff0f 	bl	80028d6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(TL2_1_GPIO_Port, TL2_1_Pin);
 8001ab8:	2110      	movs	r1, #16
 8001aba:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <toggleYellow2+0x18>)
 8001abc:	f000 ff0b 	bl	80028d6 <HAL_GPIO_TogglePin>
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40010c00 	.word	0x40010c00

08001ac8 <pedsRed>:
 *
 */
#include <trafficPeds.h>


void pedsRed(){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_SET);
 8001acc:	2201      	movs	r2, #1
 8001ace:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ad2:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <pedsRed+0x20>)
 8001ad4:	f000 fee7 	bl	80028a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ade:	4803      	ldr	r0, [pc, #12]	; (8001aec <pedsRed+0x24>)
 8001ae0:	f000 fee1 	bl	80028a6 <HAL_GPIO_WritePin>
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40010c00 	.word	0x40010c00
 8001aec:	40010800 	.word	0x40010800

08001af0 <pedsGreen>:

void pedsGreen(){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001afa:	4805      	ldr	r0, [pc, #20]	; (8001b10 <pedsGreen+0x20>)
 8001afc:	f000 fed3 	bl	80028a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
 8001b00:	2201      	movs	r2, #1
 8001b02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b06:	4803      	ldr	r0, [pc, #12]	; (8001b14 <pedsGreen+0x24>)
 8001b08:	f000 fecd 	bl	80028a6 <HAL_GPIO_WritePin>
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40010c00 	.word	0x40010c00
 8001b14:	40010800 	.word	0x40010800

08001b18 <turnOffPeds>:
void pedsYellow(){
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
}

void turnOffPeds(){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b22:	4805      	ldr	r0, [pc, #20]	; (8001b38 <turnOffPeds+0x20>)
 8001b24:	f000 febf 	bl	80028a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b2e:	4803      	ldr	r0, [pc, #12]	; (8001b3c <turnOffPeds+0x24>)
 8001b30:	f000 feb9 	bl	80028a6 <HAL_GPIO_WritePin>
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40010c00 	.word	0x40010c00
 8001b3c:	40010800 	.word	0x40010800

08001b40 <UART_display>:


void UART_display(){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
	int d1 = numberCounter / 10;
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <UART_display+0x58>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a14      	ldr	r2, [pc, #80]	; (8001b9c <UART_display+0x5c>)
 8001b4c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b50:	1092      	asrs	r2, r2, #2
 8001b52:	17db      	asrs	r3, r3, #31
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	607b      	str	r3, [r7, #4]
	int d2 = numberCounter % 10;
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <UART_display+0x58>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <UART_display+0x5c>)
 8001b5e:	fb83 1302 	smull	r1, r3, r3, r2
 8001b62:	1099      	asrs	r1, r3, #2
 8001b64:	17d3      	asrs	r3, r2, #31
 8001b66:	1ac9      	subs	r1, r1, r3
 8001b68:	460b      	mov	r3, r1
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	603b      	str	r3, [r7, #0]
	HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!7SEG=%d%d#\r\n", d1, d2), 1000);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	4909      	ldr	r1, [pc, #36]	; (8001ba0 <UART_display+0x60>)
 8001b7a:	480a      	ldr	r0, [pc, #40]	; (8001ba4 <UART_display+0x64>)
 8001b7c:	f002 ff46 	bl	8004a0c <siprintf>
 8001b80:	4603      	mov	r3, r0
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b88:	4906      	ldr	r1, [pc, #24]	; (8001ba4 <UART_display+0x64>)
 8001b8a:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <UART_display+0x68>)
 8001b8c:	f002 fa81 	bl	8004092 <HAL_UART_Transmit>
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	2000011c 	.word	0x2000011c
 8001b9c:	66666667 	.word	0x66666667
 8001ba0:	08005318 	.word	0x08005318
 8001ba4:	20000120 	.word	0x20000120
 8001ba8:	200001e4 	.word	0x200001e4

08001bac <tuning_run>:
#include "tuning_fsm.h"




void tuning_run(){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	switch(status){
 8001bb0:	4bae      	ldr	r3, [pc, #696]	; (8001e6c <tuning_run+0x2c0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	3b14      	subs	r3, #20
 8001bb6:	2b05      	cmp	r3, #5
 8001bb8:	f200 81ec 	bhi.w	8001f94 <tuning_run+0x3e8>
 8001bbc:	a201      	add	r2, pc, #4	; (adr r2, 8001bc4 <tuning_run+0x18>)
 8001bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc2:	bf00      	nop
 8001bc4:	08001bdd 	.word	0x08001bdd
 8001bc8:	08001c6f 	.word	0x08001c6f
 8001bcc:	08001d07 	.word	0x08001d07
 8001bd0:	08001da3 	.word	0x08001da3
 8001bd4:	08001e3f 	.word	0x08001e3f
 8001bd8:	08001efb 	.word	0x08001efb
	case SETTING_RED1:

		if(timer1_flag){
 8001bdc:	4ba4      	ldr	r3, [pc, #656]	; (8001e70 <tuning_run+0x2c4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <tuning_run+0x44>
//			timer1_flag = 0;
			setTimer1(1000);
 8001be4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001be8:	f7ff fe4a 	bl	8001880 <setTimer1>
			toggleRed1();
 8001bec:	f7ff fee2 	bl	80019b4 <toggleRed1>
		}

		if(isButtonPressed(1)){
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f7fe ff95 	bl	8000b20 <isButtonPressed>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <tuning_run+0x56>
			tuningReturnToAuto();
 8001bfc:	f000 fa2a 	bl	8002054 <tuningReturnToAuto>
			break;
 8001c00:	e1d5      	b.n	8001fae <tuning_run+0x402>
		}

		if(isButtonPressed(0)){
 8001c02:	2000      	movs	r0, #0
 8001c04:	f7fe ff8c 	bl	8000b20 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8001c08:	2002      	movs	r0, #2
 8001c0a:	f7fe ff89 	bl	8000b20 <isButtonPressed>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d016      	beq.n	8001c42 <tuning_run+0x96>
			isButtonPressed(3);
 8001c14:	2003      	movs	r0, #3
 8001c16:	f7fe ff83 	bl	8000b20 <isButtonPressed>
			status = SETTING_RED2;
 8001c1a:	4b94      	ldr	r3, [pc, #592]	; (8001e6c <tuning_run+0x2c0>)
 8001c1c:	2215      	movs	r2, #21
 8001c1e:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001c20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c24:	f7ff fe2c 	bl	8001880 <setTimer1>
			configRed1();
 8001c28:	f7ff f8b0 	bl	8000d8c <configRed1>
			numberCounter = redDuration2;
 8001c2c:	4b91      	ldr	r3, [pc, #580]	; (8001e74 <tuning_run+0x2c8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a91      	ldr	r2, [pc, #580]	; (8001e78 <tuning_run+0x2cc>)
 8001c32:	6013      	str	r3, [r2, #0]
			UART_display();
 8001c34:	f7ff ff84 	bl	8001b40 <UART_display>
			turnOffTraffic1();
 8001c38:	f7ff fea8 	bl	800198c <turnOffTraffic1>
			turnOffTraffic2();
 8001c3c:	f7ff ff12 	bl	8001a64 <turnOffTraffic2>
			break;
 8001c40:	e1b5      	b.n	8001fae <tuning_run+0x402>
		}

		if(isButtonPressed(3)){
 8001c42:	2003      	movs	r0, #3
 8001c44:	f7fe ff6c 	bl	8000b20 <isButtonPressed>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 81a4 	beq.w	8001f98 <tuning_run+0x3ec>
			numberCounter++;
 8001c50:	4b89      	ldr	r3, [pc, #548]	; (8001e78 <tuning_run+0x2cc>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	3301      	adds	r3, #1
 8001c56:	4a88      	ldr	r2, [pc, #544]	; (8001e78 <tuning_run+0x2cc>)
 8001c58:	6013      	str	r3, [r2, #0]
			if(numberCounter > 60){
 8001c5a:	4b87      	ldr	r3, [pc, #540]	; (8001e78 <tuning_run+0x2cc>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b3c      	cmp	r3, #60	; 0x3c
 8001c60:	dd02      	ble.n	8001c68 <tuning_run+0xbc>
				numberCounter = 2;
 8001c62:	4b85      	ldr	r3, [pc, #532]	; (8001e78 <tuning_run+0x2cc>)
 8001c64:	2202      	movs	r2, #2
 8001c66:	601a      	str	r2, [r3, #0]
			}
			UART_display();
 8001c68:	f7ff ff6a 	bl	8001b40 <UART_display>
		}

		break;
 8001c6c:	e194      	b.n	8001f98 <tuning_run+0x3ec>
	case SETTING_RED2:
		if(timer1_flag){
 8001c6e:	4b80      	ldr	r3, [pc, #512]	; (8001e70 <tuning_run+0x2c4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d008      	beq.n	8001c88 <tuning_run+0xdc>
			timer1_flag = 0;
 8001c76:	4b7e      	ldr	r3, [pc, #504]	; (8001e70 <tuning_run+0x2c4>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001c7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c80:	f7ff fdfe 	bl	8001880 <setTimer1>
			toggleRed2();
 8001c84:	f7ff fefe 	bl	8001a84 <toggleRed2>
		}

		if(isButtonPressed(1)){
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f7fe ff49 	bl	8000b20 <isButtonPressed>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <tuning_run+0xee>
			tuningReturnToAuto();
 8001c94:	f000 f9de 	bl	8002054 <tuningReturnToAuto>
			break;
 8001c98:	e189      	b.n	8001fae <tuning_run+0x402>
		}
		if(isButtonPressed(0)){
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f7fe ff40 	bl	8000b20 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8001ca0:	2002      	movs	r0, #2
 8001ca2:	f7fe ff3d 	bl	8000b20 <isButtonPressed>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d016      	beq.n	8001cda <tuning_run+0x12e>
			isButtonPressed(3);
 8001cac:	2003      	movs	r0, #3
 8001cae:	f7fe ff37 	bl	8000b20 <isButtonPressed>
			status = SETTING_GREEN1;
 8001cb2:	4b6e      	ldr	r3, [pc, #440]	; (8001e6c <tuning_run+0x2c0>)
 8001cb4:	2216      	movs	r2, #22
 8001cb6:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001cb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cbc:	f7ff fde0 	bl	8001880 <setTimer1>
			configRed2();
 8001cc0:	f7ff f8ba 	bl	8000e38 <configRed2>
			numberCounter = greenDuration1;
 8001cc4:	4b6d      	ldr	r3, [pc, #436]	; (8001e7c <tuning_run+0x2d0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a6b      	ldr	r2, [pc, #428]	; (8001e78 <tuning_run+0x2cc>)
 8001cca:	6013      	str	r3, [r2, #0]
			UART_display();
 8001ccc:	f7ff ff38 	bl	8001b40 <UART_display>
			turnOffTraffic1();
 8001cd0:	f7ff fe5c 	bl	800198c <turnOffTraffic1>
			turnOffTraffic2();
 8001cd4:	f7ff fec6 	bl	8001a64 <turnOffTraffic2>
			break;
 8001cd8:	e169      	b.n	8001fae <tuning_run+0x402>
		}

		if(isButtonPressed(3)){
 8001cda:	2003      	movs	r0, #3
 8001cdc:	f7fe ff20 	bl	8000b20 <isButtonPressed>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 815a 	beq.w	8001f9c <tuning_run+0x3f0>
			numberCounter++;
 8001ce8:	4b63      	ldr	r3, [pc, #396]	; (8001e78 <tuning_run+0x2cc>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	3301      	adds	r3, #1
 8001cee:	4a62      	ldr	r2, [pc, #392]	; (8001e78 <tuning_run+0x2cc>)
 8001cf0:	6013      	str	r3, [r2, #0]
			if(numberCounter > 60){
 8001cf2:	4b61      	ldr	r3, [pc, #388]	; (8001e78 <tuning_run+0x2cc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b3c      	cmp	r3, #60	; 0x3c
 8001cf8:	dd02      	ble.n	8001d00 <tuning_run+0x154>
				numberCounter = 2;
 8001cfa:	4b5f      	ldr	r3, [pc, #380]	; (8001e78 <tuning_run+0x2cc>)
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	601a      	str	r2, [r3, #0]
			}
			UART_display();
 8001d00:	f7ff ff1e 	bl	8001b40 <UART_display>
		}
		break;
 8001d04:	e14a      	b.n	8001f9c <tuning_run+0x3f0>
	case SETTING_GREEN1:

		if(timer1_flag){
 8001d06:	4b5a      	ldr	r3, [pc, #360]	; (8001e70 <tuning_run+0x2c4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d008      	beq.n	8001d20 <tuning_run+0x174>
			timer1_flag = 0;
 8001d0e:	4b58      	ldr	r3, [pc, #352]	; (8001e70 <tuning_run+0x2c4>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001d14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d18:	f7ff fdb2 	bl	8001880 <setTimer1>
			toggleGreen1();
 8001d1c:	f7ff fe56 	bl	80019cc <toggleGreen1>
		}

		if(isButtonPressed(1)){
 8001d20:	2001      	movs	r0, #1
 8001d22:	f7fe fefd 	bl	8000b20 <isButtonPressed>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <tuning_run+0x186>
			tuningReturnToAuto();
 8001d2c:	f000 f992 	bl	8002054 <tuningReturnToAuto>
			break;
 8001d30:	e13d      	b.n	8001fae <tuning_run+0x402>
		}

		if(isButtonPressed(0)){
 8001d32:	2000      	movs	r0, #0
 8001d34:	f7fe fef4 	bl	8000b20 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8001d38:	2002      	movs	r0, #2
 8001d3a:	f7fe fef1 	bl	8000b20 <isButtonPressed>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d016      	beq.n	8001d72 <tuning_run+0x1c6>
			isButtonPressed(3);
 8001d44:	2003      	movs	r0, #3
 8001d46:	f7fe feeb 	bl	8000b20 <isButtonPressed>
			status = SETTING_GREEN2;
 8001d4a:	4b48      	ldr	r3, [pc, #288]	; (8001e6c <tuning_run+0x2c0>)
 8001d4c:	2217      	movs	r2, #23
 8001d4e:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001d50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d54:	f7ff fd94 	bl	8001880 <setTimer1>
			configGreen1();
 8001d58:	f7ff f83a 	bl	8000dd0 <configGreen1>
			numberCounter = greenDuration2;
 8001d5c:	4b48      	ldr	r3, [pc, #288]	; (8001e80 <tuning_run+0x2d4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a45      	ldr	r2, [pc, #276]	; (8001e78 <tuning_run+0x2cc>)
 8001d62:	6013      	str	r3, [r2, #0]
			UART_display();
 8001d64:	f7ff feec 	bl	8001b40 <UART_display>
			turnOffTraffic1();
 8001d68:	f7ff fe10 	bl	800198c <turnOffTraffic1>
			turnOffTraffic2();
 8001d6c:	f7ff fe7a 	bl	8001a64 <turnOffTraffic2>
			break;
 8001d70:	e11d      	b.n	8001fae <tuning_run+0x402>
		}

		if(isButtonPressed(3)){
 8001d72:	2003      	movs	r0, #3
 8001d74:	f7fe fed4 	bl	8000b20 <isButtonPressed>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 8110 	beq.w	8001fa0 <tuning_run+0x3f4>
			numberCounter++;
 8001d80:	4b3d      	ldr	r3, [pc, #244]	; (8001e78 <tuning_run+0x2cc>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	3301      	adds	r3, #1
 8001d86:	4a3c      	ldr	r2, [pc, #240]	; (8001e78 <tuning_run+0x2cc>)
 8001d88:	6013      	str	r3, [r2, #0]
			if(numberCounter > redDuration2 - 1){
 8001d8a:	4b3a      	ldr	r3, [pc, #232]	; (8001e74 <tuning_run+0x2c8>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4b3a      	ldr	r3, [pc, #232]	; (8001e78 <tuning_run+0x2cc>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	dc02      	bgt.n	8001d9c <tuning_run+0x1f0>
				numberCounter = 1;
 8001d96:	4b38      	ldr	r3, [pc, #224]	; (8001e78 <tuning_run+0x2cc>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
			}
			UART_display();
 8001d9c:	f7ff fed0 	bl	8001b40 <UART_display>
		}
		break;
 8001da0:	e0fe      	b.n	8001fa0 <tuning_run+0x3f4>
	case SETTING_GREEN2:

		if(timer1_flag){
 8001da2:	4b33      	ldr	r3, [pc, #204]	; (8001e70 <tuning_run+0x2c4>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d008      	beq.n	8001dbc <tuning_run+0x210>
			timer1_flag = 0;
 8001daa:	4b31      	ldr	r3, [pc, #196]	; (8001e70 <tuning_run+0x2c4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001db0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001db4:	f7ff fd64 	bl	8001880 <setTimer1>
			toggleGreen2();
 8001db8:	f7ff fe6e 	bl	8001a98 <toggleGreen2>
		}

		if(isButtonPressed(1)){
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	f7fe feaf 	bl	8000b20 <isButtonPressed>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <tuning_run+0x222>
			tuningReturnToAuto();
 8001dc8:	f000 f944 	bl	8002054 <tuningReturnToAuto>
			break;
 8001dcc:	e0ef      	b.n	8001fae <tuning_run+0x402>
		}

		if(isButtonPressed(0)){
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f7fe fea6 	bl	8000b20 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8001dd4:	2002      	movs	r0, #2
 8001dd6:	f7fe fea3 	bl	8000b20 <isButtonPressed>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d016      	beq.n	8001e0e <tuning_run+0x262>
			isButtonPressed(3);
 8001de0:	2003      	movs	r0, #3
 8001de2:	f7fe fe9d 	bl	8000b20 <isButtonPressed>
			status = SETTING_YELLOW1;
 8001de6:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <tuning_run+0x2c0>)
 8001de8:	2218      	movs	r2, #24
 8001dea:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001dec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001df0:	f7ff fd46 	bl	8001880 <setTimer1>
			configGreen2();
 8001df4:	f7ff f842 	bl	8000e7c <configGreen2>
			numberCounter = yellowDuration1;
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <tuning_run+0x2d8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a1e      	ldr	r2, [pc, #120]	; (8001e78 <tuning_run+0x2cc>)
 8001dfe:	6013      	str	r3, [r2, #0]
			UART_display();
 8001e00:	f7ff fe9e 	bl	8001b40 <UART_display>
			turnOffTraffic1();
 8001e04:	f7ff fdc2 	bl	800198c <turnOffTraffic1>
			turnOffTraffic2();
 8001e08:	f7ff fe2c 	bl	8001a64 <turnOffTraffic2>
			break;
 8001e0c:	e0cf      	b.n	8001fae <tuning_run+0x402>
		}

		if(isButtonPressed(3)){
 8001e0e:	2003      	movs	r0, #3
 8001e10:	f7fe fe86 	bl	8000b20 <isButtonPressed>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 80c4 	beq.w	8001fa4 <tuning_run+0x3f8>
			numberCounter++;
 8001e1c:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <tuning_run+0x2cc>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	3301      	adds	r3, #1
 8001e22:	4a15      	ldr	r2, [pc, #84]	; (8001e78 <tuning_run+0x2cc>)
 8001e24:	6013      	str	r3, [r2, #0]
			if(numberCounter > redDuration1 - 1){
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <tuning_run+0x2dc>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <tuning_run+0x2cc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	dc02      	bgt.n	8001e38 <tuning_run+0x28c>
				numberCounter = 1;
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <tuning_run+0x2cc>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
			}
			UART_display();
 8001e38:	f7ff fe82 	bl	8001b40 <UART_display>
		}
		break;
 8001e3c:	e0b2      	b.n	8001fa4 <tuning_run+0x3f8>
	case SETTING_YELLOW1:
		if(timer1_flag){
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <tuning_run+0x2c4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d008      	beq.n	8001e58 <tuning_run+0x2ac>
			timer1_flag = 0;
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <tuning_run+0x2c4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001e4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e50:	f7ff fd16 	bl	8001880 <setTimer1>
			toggleYellow1();
 8001e54:	f7ff fdc4 	bl	80019e0 <toggleYellow1>
		}
		if(isButtonPressed(1)){
 8001e58:	2001      	movs	r0, #1
 8001e5a:	f7fe fe61 	bl	8000b20 <isButtonPressed>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d013      	beq.n	8001e8c <tuning_run+0x2e0>
			tuningReturnToAuto();
 8001e64:	f000 f8f6 	bl	8002054 <tuningReturnToAuto>
			break;
 8001e68:	e0a1      	b.n	8001fae <tuning_run+0x402>
 8001e6a:	bf00      	nop
 8001e6c:	20000114 	.word	0x20000114
 8001e70:	20000134 	.word	0x20000134
 8001e74:	2000001c 	.word	0x2000001c
 8001e78:	2000011c 	.word	0x2000011c
 8001e7c:	20000014 	.word	0x20000014
 8001e80:	20000020 	.word	0x20000020
 8001e84:	20000018 	.word	0x20000018
 8001e88:	20000010 	.word	0x20000010
		}

		if(isButtonPressed(0)){
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7fe fe47 	bl	8000b20 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8001e92:	2002      	movs	r0, #2
 8001e94:	f7fe fe44 	bl	8000b20 <isButtonPressed>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d016      	beq.n	8001ecc <tuning_run+0x320>
			isButtonPressed(3);
 8001e9e:	2003      	movs	r0, #3
 8001ea0:	f7fe fe3e 	bl	8000b20 <isButtonPressed>
			status = SETTING_YELLOW2;
 8001ea4:	4b43      	ldr	r3, [pc, #268]	; (8001fb4 <tuning_run+0x408>)
 8001ea6:	2219      	movs	r2, #25
 8001ea8:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001eaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eae:	f7ff fce7 	bl	8001880 <setTimer1>
			configYellow1();
 8001eb2:	f7fe ffa7 	bl	8000e04 <configYellow1>
			numberCounter = yellowDuration2;
 8001eb6:	4b40      	ldr	r3, [pc, #256]	; (8001fb8 <tuning_run+0x40c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a40      	ldr	r2, [pc, #256]	; (8001fbc <tuning_run+0x410>)
 8001ebc:	6013      	str	r3, [r2, #0]
			UART_display();
 8001ebe:	f7ff fe3f 	bl	8001b40 <UART_display>
			turnOffTraffic1();
 8001ec2:	f7ff fd63 	bl	800198c <turnOffTraffic1>
			turnOffTraffic2();
 8001ec6:	f7ff fdcd 	bl	8001a64 <turnOffTraffic2>
			break;
 8001eca:	e070      	b.n	8001fae <tuning_run+0x402>
		}

		if(isButtonPressed(3)){
 8001ecc:	2003      	movs	r0, #3
 8001ece:	f7fe fe27 	bl	8000b20 <isButtonPressed>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d067      	beq.n	8001fa8 <tuning_run+0x3fc>
			numberCounter++;
 8001ed8:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <tuning_run+0x410>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	3301      	adds	r3, #1
 8001ede:	4a37      	ldr	r2, [pc, #220]	; (8001fbc <tuning_run+0x410>)
 8001ee0:	6013      	str	r3, [r2, #0]
			if(numberCounter > redDuration2 - 1){
 8001ee2:	4b37      	ldr	r3, [pc, #220]	; (8001fc0 <tuning_run+0x414>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	4b35      	ldr	r3, [pc, #212]	; (8001fbc <tuning_run+0x410>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	dc02      	bgt.n	8001ef4 <tuning_run+0x348>
				numberCounter = 1;
 8001eee:	4b33      	ldr	r3, [pc, #204]	; (8001fbc <tuning_run+0x410>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
			}
			UART_display();
 8001ef4:	f7ff fe24 	bl	8001b40 <UART_display>
		}
		break;
 8001ef8:	e056      	b.n	8001fa8 <tuning_run+0x3fc>
	case SETTING_YELLOW2:
		if(timer1_flag){
 8001efa:	4b32      	ldr	r3, [pc, #200]	; (8001fc4 <tuning_run+0x418>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d008      	beq.n	8001f14 <tuning_run+0x368>
			timer1_flag = 0;
 8001f02:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <tuning_run+0x418>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001f08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f0c:	f7ff fcb8 	bl	8001880 <setTimer1>
			toggleYellow2();
 8001f10:	f7ff fdcc 	bl	8001aac <toggleYellow2>
		}

		if(isButtonPressed(1)){
 8001f14:	2001      	movs	r0, #1
 8001f16:	f7fe fe03 	bl	8000b20 <isButtonPressed>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <tuning_run+0x37a>
			tuningReturnToAuto();
 8001f20:	f000 f898 	bl	8002054 <tuningReturnToAuto>
			break;
 8001f24:	e043      	b.n	8001fae <tuning_run+0x402>
		}

		if(isButtonPressed(0)){
 8001f26:	2000      	movs	r0, #0
 8001f28:	f7fe fdfa 	bl	8000b20 <isButtonPressed>

		}

		if(isButtonPressed(2)){
 8001f2c:	2002      	movs	r0, #2
 8001f2e:	f7fe fdf7 	bl	8000b20 <isButtonPressed>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d016      	beq.n	8001f66 <tuning_run+0x3ba>
			isButtonPressed(3);
 8001f38:	2003      	movs	r0, #3
 8001f3a:	f7fe fdf1 	bl	8000b20 <isButtonPressed>
			status = SETTING_RED1;
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <tuning_run+0x408>)
 8001f40:	2214      	movs	r2, #20
 8001f42:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001f44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f48:	f7ff fc9a 	bl	8001880 <setTimer1>
			configYellow2();
 8001f4c:	f7fe ffb0 	bl	8000eb0 <configYellow2>
			numberCounter = redDuration1;
 8001f50:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <tuning_run+0x41c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a19      	ldr	r2, [pc, #100]	; (8001fbc <tuning_run+0x410>)
 8001f56:	6013      	str	r3, [r2, #0]
			UART_display();
 8001f58:	f7ff fdf2 	bl	8001b40 <UART_display>
			turnOffTraffic1();
 8001f5c:	f7ff fd16 	bl	800198c <turnOffTraffic1>
			turnOffTraffic2();
 8001f60:	f7ff fd80 	bl	8001a64 <turnOffTraffic2>
			break;
 8001f64:	e023      	b.n	8001fae <tuning_run+0x402>
		}

		if(isButtonPressed(3)){
 8001f66:	2003      	movs	r0, #3
 8001f68:	f7fe fdda 	bl	8000b20 <isButtonPressed>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d01c      	beq.n	8001fac <tuning_run+0x400>
			numberCounter++;
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <tuning_run+0x410>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	4a10      	ldr	r2, [pc, #64]	; (8001fbc <tuning_run+0x410>)
 8001f7a:	6013      	str	r3, [r2, #0]
			if(numberCounter > redDuration1 - 1){
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <tuning_run+0x41c>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <tuning_run+0x410>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	dc02      	bgt.n	8001f8e <tuning_run+0x3e2>
				numberCounter = 1;
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <tuning_run+0x410>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]
			}
			UART_display();
 8001f8e:	f7ff fdd7 	bl	8001b40 <UART_display>
		}
		break;
 8001f92:	e00b      	b.n	8001fac <tuning_run+0x400>
	default:
		break;
 8001f94:	bf00      	nop
 8001f96:	e00a      	b.n	8001fae <tuning_run+0x402>
		break;
 8001f98:	bf00      	nop
 8001f9a:	e008      	b.n	8001fae <tuning_run+0x402>
		break;
 8001f9c:	bf00      	nop
 8001f9e:	e006      	b.n	8001fae <tuning_run+0x402>
		break;
 8001fa0:	bf00      	nop
 8001fa2:	e004      	b.n	8001fae <tuning_run+0x402>
		break;
 8001fa4:	bf00      	nop
 8001fa6:	e002      	b.n	8001fae <tuning_run+0x402>
		break;
 8001fa8:	bf00      	nop
 8001faa:	e000      	b.n	8001fae <tuning_run+0x402>
		break;
 8001fac:	bf00      	nop
	}
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000114 	.word	0x20000114
 8001fb8:	20000024 	.word	0x20000024
 8001fbc:	2000011c 	.word	0x2000011c
 8001fc0:	2000001c 	.word	0x2000001c
 8001fc4:	20000134 	.word	0x20000134
 8001fc8:	20000010 	.word	0x20000010

08001fcc <autoClickButton1>:
 */

#include "utils.h"
#include "global.h"

void autoClickButton1() {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
	isButtonPressed(2);
 8001fd0:	2002      	movs	r0, #2
 8001fd2:	f7fe fda5 	bl	8000b20 <isButtonPressed>
	isButtonPressed(3);
 8001fd6:	2003      	movs	r0, #3
 8001fd8:	f7fe fda2 	bl	8000b20 <isButtonPressed>
	status=MAN_RED_GREEN;
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <autoClickButton1+0x40>)
 8001fde:	220b      	movs	r2, #11
 8001fe0:	601a      	str	r2, [r3, #0]
	Red_1();
 8001fe2:	f7ff fc97 	bl	8001914 <Red_1>
	Green_2();
 8001fe6:	f7ff fd1d 	bl	8001a24 <Green_2>
	pedsGreen();
 8001fea:	f7ff fd81 	bl	8001af0 <pedsGreen>
	pedsStatus = PED_GREEN;
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <autoClickButton1+0x44>)
 8001ff0:	2204      	movs	r2, #4
 8001ff2:	601a      	str	r2, [r3, #0]
	setTimer1(10000);
 8001ff4:	f242 7010 	movw	r0, #10000	; 0x2710
 8001ff8:	f7ff fc42 	bl	8001880 <setTimer1>
	numberCounter = 60;
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <autoClickButton1+0x48>)
 8001ffe:	223c      	movs	r2, #60	; 0x3c
 8002000:	601a      	str	r2, [r3, #0]
	UART_display();
 8002002:	f7ff fd9d 	bl	8001b40 <UART_display>
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000114 	.word	0x20000114
 8002010:	20000118 	.word	0x20000118
 8002014:	2000011c 	.word	0x2000011c

08002018 <manualClickButton1>:

void manualClickButton1() {
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
	isButtonPressed(2);
 800201c:	2002      	movs	r0, #2
 800201e:	f7fe fd7f 	bl	8000b20 <isButtonPressed>
	status = SETTING_RED1;
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <manualClickButton1+0x30>)
 8002024:	2214      	movs	r2, #20
 8002026:	601a      	str	r2, [r3, #0]
	setTimer1(1000);
 8002028:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800202c:	f7ff fc28 	bl	8001880 <setTimer1>
	numberCounter = redDuration1;
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <manualClickButton1+0x34>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a06      	ldr	r2, [pc, #24]	; (8002050 <manualClickButton1+0x38>)
 8002036:	6013      	str	r3, [r2, #0]
	UART_display();
 8002038:	f7ff fd82 	bl	8001b40 <UART_display>
	turnOffTraffic1();
 800203c:	f7ff fca6 	bl	800198c <turnOffTraffic1>
	turnOffTraffic2();
 8002040:	f7ff fd10 	bl	8001a64 <turnOffTraffic2>
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000114 	.word	0x20000114
 800204c:	20000010 	.word	0x20000010
 8002050:	2000011c 	.word	0x2000011c

08002054 <tuningReturnToAuto>:

void tuningReturnToAuto(){
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
	isButtonPressed(2);
 8002058:	2002      	movs	r0, #2
 800205a:	f7fe fd61 	bl	8000b20 <isButtonPressed>
	isButtonPressed(3);
 800205e:	2003      	movs	r0, #3
 8002060:	f7fe fd5e 	bl	8000b20 <isButtonPressed>

	switch(status) {
 8002064:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <tuningReturnToAuto+0x84>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3b14      	subs	r3, #20
 800206a:	2b05      	cmp	r3, #5
 800206c:	d820      	bhi.n	80020b0 <tuningReturnToAuto+0x5c>
 800206e:	a201      	add	r2, pc, #4	; (adr r2, 8002074 <tuningReturnToAuto+0x20>)
 8002070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002074:	0800208d 	.word	0x0800208d
 8002078:	08002093 	.word	0x08002093
 800207c:	08002099 	.word	0x08002099
 8002080:	0800209f 	.word	0x0800209f
 8002084:	080020a5 	.word	0x080020a5
 8002088:	080020ab 	.word	0x080020ab
		case SETTING_RED1:
			configRed1();
 800208c:	f7fe fe7e 	bl	8000d8c <configRed1>
			break;
 8002090:	e00f      	b.n	80020b2 <tuningReturnToAuto+0x5e>
		case SETTING_RED2:
			configRed2();
 8002092:	f7fe fed1 	bl	8000e38 <configRed2>
			break;
 8002096:	e00c      	b.n	80020b2 <tuningReturnToAuto+0x5e>
		case SETTING_GREEN1:
			configGreen1();
 8002098:	f7fe fe9a 	bl	8000dd0 <configGreen1>
			break;
 800209c:	e009      	b.n	80020b2 <tuningReturnToAuto+0x5e>
		case SETTING_GREEN2:
			configGreen2();
 800209e:	f7fe feed 	bl	8000e7c <configGreen2>
			break;
 80020a2:	e006      	b.n	80020b2 <tuningReturnToAuto+0x5e>
		case SETTING_YELLOW1:
			configYellow1();
 80020a4:	f7fe feae 	bl	8000e04 <configYellow1>
			break;
 80020a8:	e003      	b.n	80020b2 <tuningReturnToAuto+0x5e>
		case SETTING_YELLOW2:
			configYellow2();
 80020aa:	f7fe ff01 	bl	8000eb0 <configYellow2>
			break;
 80020ae:	e000      	b.n	80020b2 <tuningReturnToAuto+0x5e>
		default:
			break;
 80020b0:	bf00      	nop
	}
	status = AUTO_RED_GREEN;
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <tuningReturnToAuto+0x84>)
 80020b4:	2202      	movs	r2, #2
 80020b6:	601a      	str	r2, [r3, #0]
	setTimer1(1000);
 80020b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020bc:	f7ff fbe0 	bl	8001880 <setTimer1>
	numberCounter = redDuration1;
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <tuningReturnToAuto+0x88>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a06      	ldr	r2, [pc, #24]	; (80020e0 <tuningReturnToAuto+0x8c>)
 80020c6:	6013      	str	r3, [r2, #0]
	UART_display();
 80020c8:	f7ff fd3a 	bl	8001b40 <UART_display>
	Red_1();
 80020cc:	f7ff fc22 	bl	8001914 <Red_1>
	Green_2();
 80020d0:	f7ff fca8 	bl	8001a24 <Green_2>
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000114 	.word	0x20000114
 80020dc:	20000010 	.word	0x20000010
 80020e0:	2000011c 	.word	0x2000011c

080020e4 <Reset_Handler>:
 80020e4:	480c      	ldr	r0, [pc, #48]	; (8002118 <LoopFillZerobss+0x12>)
 80020e6:	490d      	ldr	r1, [pc, #52]	; (800211c <LoopFillZerobss+0x16>)
 80020e8:	4a0d      	ldr	r2, [pc, #52]	; (8002120 <LoopFillZerobss+0x1a>)
 80020ea:	2300      	movs	r3, #0
 80020ec:	e002      	b.n	80020f4 <LoopCopyDataInit>

080020ee <CopyDataInit>:
 80020ee:	58d4      	ldr	r4, [r2, r3]
 80020f0:	50c4      	str	r4, [r0, r3]
 80020f2:	3304      	adds	r3, #4

080020f4 <LoopCopyDataInit>:
 80020f4:	18c4      	adds	r4, r0, r3
 80020f6:	428c      	cmp	r4, r1
 80020f8:	d3f9      	bcc.n	80020ee <CopyDataInit>
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <LoopFillZerobss+0x1e>)
 80020fc:	4c0a      	ldr	r4, [pc, #40]	; (8002128 <LoopFillZerobss+0x22>)
 80020fe:	2300      	movs	r3, #0
 8002100:	e001      	b.n	8002106 <LoopFillZerobss>

08002102 <FillZerobss>:
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	3204      	adds	r2, #4

08002106 <LoopFillZerobss>:
 8002106:	42a2      	cmp	r2, r4
 8002108:	d3fb      	bcc.n	8002102 <FillZerobss>
 800210a:	f7ff fbb3 	bl	8001874 <SystemInit>
 800210e:	f002 fc51 	bl	80049b4 <__libc_init_array>
 8002112:	f7fe fee7 	bl	8000ee4 <main>
 8002116:	4770      	bx	lr
 8002118:	20000000 	.word	0x20000000
 800211c:	20000098 	.word	0x20000098
 8002120:	0800538c 	.word	0x0800538c
 8002124:	20000098 	.word	0x20000098
 8002128:	2000022c 	.word	0x2000022c

0800212c <ADC1_2_IRQHandler>:
 800212c:	e7fe      	b.n	800212c <ADC1_2_IRQHandler>
	...

08002130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <HAL_Init+0x28>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a07      	ldr	r2, [pc, #28]	; (8002158 <HAL_Init+0x28>)
 800213a:	f043 0310 	orr.w	r3, r3, #16
 800213e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002140:	2003      	movs	r0, #3
 8002142:	f000 f923 	bl	800238c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002146:	200f      	movs	r0, #15
 8002148:	f000 f808 	bl	800215c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800214c:	f7ff fa32 	bl	80015b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40022000 	.word	0x40022000

0800215c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002164:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <HAL_InitTick+0x54>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_InitTick+0x58>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4619      	mov	r1, r3
 800216e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002172:	fbb3 f3f1 	udiv	r3, r3, r1
 8002176:	fbb2 f3f3 	udiv	r3, r2, r3
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f93b 	bl	80023f6 <HAL_SYSTICK_Config>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e00e      	b.n	80021a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b0f      	cmp	r3, #15
 800218e:	d80a      	bhi.n	80021a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002190:	2200      	movs	r2, #0
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	f04f 30ff 	mov.w	r0, #4294967295
 8002198:	f000 f903 	bl	80023a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800219c:	4a06      	ldr	r2, [pc, #24]	; (80021b8 <HAL_InitTick+0x5c>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e000      	b.n	80021a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000028 	.word	0x20000028
 80021b4:	20000030 	.word	0x20000030
 80021b8:	2000002c 	.word	0x2000002c

080021bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <HAL_IncTick+0x1c>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_IncTick+0x20>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	4a03      	ldr	r2, [pc, #12]	; (80021dc <HAL_IncTick+0x20>)
 80021ce:	6013      	str	r3, [r2, #0]
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr
 80021d8:	20000030 	.word	0x20000030
 80021dc:	20000228 	.word	0x20000228

080021e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return uwTick;
 80021e4:	4b02      	ldr	r3, [pc, #8]	; (80021f0 <HAL_GetTick+0x10>)
 80021e6:	681b      	ldr	r3, [r3, #0]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	20000228 	.word	0x20000228

080021f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002210:	4013      	ands	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800221c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002226:	4a04      	ldr	r2, [pc, #16]	; (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	60d3      	str	r3, [r2, #12]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <__NVIC_GetPriorityGrouping+0x18>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	f003 0307 	and.w	r3, r3, #7
}
 800224a:	4618      	mov	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	2b00      	cmp	r3, #0
 8002268:	db0b      	blt.n	8002282 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	f003 021f 	and.w	r2, r3, #31
 8002270:	4906      	ldr	r1, [pc, #24]	; (800228c <__NVIC_EnableIRQ+0x34>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	2001      	movs	r0, #1
 800227a:	fa00 f202 	lsl.w	r2, r0, r2
 800227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100

08002290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	db0a      	blt.n	80022ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	490c      	ldr	r1, [pc, #48]	; (80022dc <__NVIC_SetPriority+0x4c>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	0112      	lsls	r2, r2, #4
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	440b      	add	r3, r1
 80022b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b8:	e00a      	b.n	80022d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4908      	ldr	r1, [pc, #32]	; (80022e0 <__NVIC_SetPriority+0x50>)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	3b04      	subs	r3, #4
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	440b      	add	r3, r1
 80022ce:	761a      	strb	r2, [r3, #24]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	; 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f1c3 0307 	rsb	r3, r3, #7
 80022fe:	2b04      	cmp	r3, #4
 8002300:	bf28      	it	cs
 8002302:	2304      	movcs	r3, #4
 8002304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3304      	adds	r3, #4
 800230a:	2b06      	cmp	r3, #6
 800230c:	d902      	bls.n	8002314 <NVIC_EncodePriority+0x30>
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3b03      	subs	r3, #3
 8002312:	e000      	b.n	8002316 <NVIC_EncodePriority+0x32>
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	401a      	ands	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800232c:	f04f 31ff 	mov.w	r1, #4294967295
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43d9      	mvns	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	4313      	orrs	r3, r2
         );
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	; 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3b01      	subs	r3, #1
 8002354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002358:	d301      	bcc.n	800235e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235a:	2301      	movs	r3, #1
 800235c:	e00f      	b.n	800237e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <SysTick_Config+0x40>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002366:	210f      	movs	r1, #15
 8002368:	f04f 30ff 	mov.w	r0, #4294967295
 800236c:	f7ff ff90 	bl	8002290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <SysTick_Config+0x40>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002376:	4b04      	ldr	r3, [pc, #16]	; (8002388 <SysTick_Config+0x40>)
 8002378:	2207      	movs	r2, #7
 800237a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	e000e010 	.word	0xe000e010

0800238c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff2d 	bl	80021f4 <__NVIC_SetPriorityGrouping>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b086      	sub	sp, #24
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b4:	f7ff ff42 	bl	800223c <__NVIC_GetPriorityGrouping>
 80023b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	6978      	ldr	r0, [r7, #20]
 80023c0:	f7ff ff90 	bl	80022e4 <NVIC_EncodePriority>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff5f 	bl	8002290 <__NVIC_SetPriority>
}
 80023d2:	bf00      	nop
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff35 	bl	8002258 <__NVIC_EnableIRQ>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ffa2 	bl	8002348 <SysTick_Config>
 8002404:	4603      	mov	r3, r0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800240e:	b480      	push	{r7}
 8002410:	b085      	sub	sp, #20
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002420:	2b02      	cmp	r3, #2
 8002422:	d008      	beq.n	8002436 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2204      	movs	r2, #4
 8002428:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e020      	b.n	8002478 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 020e 	bic.w	r2, r2, #14
 8002444:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0201 	bic.w	r2, r2, #1
 8002454:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245e:	2101      	movs	r1, #1
 8002460:	fa01 f202 	lsl.w	r2, r1, r2
 8002464:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002476:	7bfb      	ldrb	r3, [r7, #15]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
	...

08002484 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002496:	2b02      	cmp	r3, #2
 8002498:	d005      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2204      	movs	r2, #4
 800249e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
 80024a4:	e051      	b.n	800254a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 020e 	bic.w	r2, r2, #14
 80024b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0201 	bic.w	r2, r2, #1
 80024c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a22      	ldr	r2, [pc, #136]	; (8002554 <HAL_DMA_Abort_IT+0xd0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d029      	beq.n	8002524 <HAL_DMA_Abort_IT+0xa0>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a20      	ldr	r2, [pc, #128]	; (8002558 <HAL_DMA_Abort_IT+0xd4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d022      	beq.n	8002520 <HAL_DMA_Abort_IT+0x9c>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a1f      	ldr	r2, [pc, #124]	; (800255c <HAL_DMA_Abort_IT+0xd8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d01a      	beq.n	800251a <HAL_DMA_Abort_IT+0x96>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a1d      	ldr	r2, [pc, #116]	; (8002560 <HAL_DMA_Abort_IT+0xdc>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d012      	beq.n	8002514 <HAL_DMA_Abort_IT+0x90>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1c      	ldr	r2, [pc, #112]	; (8002564 <HAL_DMA_Abort_IT+0xe0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d00a      	beq.n	800250e <HAL_DMA_Abort_IT+0x8a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1a      	ldr	r2, [pc, #104]	; (8002568 <HAL_DMA_Abort_IT+0xe4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d102      	bne.n	8002508 <HAL_DMA_Abort_IT+0x84>
 8002502:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002506:	e00e      	b.n	8002526 <HAL_DMA_Abort_IT+0xa2>
 8002508:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800250c:	e00b      	b.n	8002526 <HAL_DMA_Abort_IT+0xa2>
 800250e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002512:	e008      	b.n	8002526 <HAL_DMA_Abort_IT+0xa2>
 8002514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002518:	e005      	b.n	8002526 <HAL_DMA_Abort_IT+0xa2>
 800251a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800251e:	e002      	b.n	8002526 <HAL_DMA_Abort_IT+0xa2>
 8002520:	2310      	movs	r3, #16
 8002522:	e000      	b.n	8002526 <HAL_DMA_Abort_IT+0xa2>
 8002524:	2301      	movs	r3, #1
 8002526:	4a11      	ldr	r2, [pc, #68]	; (800256c <HAL_DMA_Abort_IT+0xe8>)
 8002528:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	4798      	blx	r3
    } 
  }
  return status;
 800254a:	7bfb      	ldrb	r3, [r7, #15]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40020008 	.word	0x40020008
 8002558:	4002001c 	.word	0x4002001c
 800255c:	40020030 	.word	0x40020030
 8002560:	40020044 	.word	0x40020044
 8002564:	40020058 	.word	0x40020058
 8002568:	4002006c 	.word	0x4002006c
 800256c:	40020000 	.word	0x40020000

08002570 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002570:	b480      	push	{r7}
 8002572:	b08b      	sub	sp, #44	; 0x2c
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800257a:	2300      	movs	r3, #0
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800257e:	2300      	movs	r3, #0
 8002580:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002582:	e169      	b.n	8002858 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002584:	2201      	movs	r2, #1
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	429a      	cmp	r2, r3
 800259e:	f040 8158 	bne.w	8002852 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4a9a      	ldr	r2, [pc, #616]	; (8002810 <HAL_GPIO_Init+0x2a0>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d05e      	beq.n	800266a <HAL_GPIO_Init+0xfa>
 80025ac:	4a98      	ldr	r2, [pc, #608]	; (8002810 <HAL_GPIO_Init+0x2a0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d875      	bhi.n	800269e <HAL_GPIO_Init+0x12e>
 80025b2:	4a98      	ldr	r2, [pc, #608]	; (8002814 <HAL_GPIO_Init+0x2a4>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d058      	beq.n	800266a <HAL_GPIO_Init+0xfa>
 80025b8:	4a96      	ldr	r2, [pc, #600]	; (8002814 <HAL_GPIO_Init+0x2a4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d86f      	bhi.n	800269e <HAL_GPIO_Init+0x12e>
 80025be:	4a96      	ldr	r2, [pc, #600]	; (8002818 <HAL_GPIO_Init+0x2a8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d052      	beq.n	800266a <HAL_GPIO_Init+0xfa>
 80025c4:	4a94      	ldr	r2, [pc, #592]	; (8002818 <HAL_GPIO_Init+0x2a8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d869      	bhi.n	800269e <HAL_GPIO_Init+0x12e>
 80025ca:	4a94      	ldr	r2, [pc, #592]	; (800281c <HAL_GPIO_Init+0x2ac>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d04c      	beq.n	800266a <HAL_GPIO_Init+0xfa>
 80025d0:	4a92      	ldr	r2, [pc, #584]	; (800281c <HAL_GPIO_Init+0x2ac>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d863      	bhi.n	800269e <HAL_GPIO_Init+0x12e>
 80025d6:	4a92      	ldr	r2, [pc, #584]	; (8002820 <HAL_GPIO_Init+0x2b0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d046      	beq.n	800266a <HAL_GPIO_Init+0xfa>
 80025dc:	4a90      	ldr	r2, [pc, #576]	; (8002820 <HAL_GPIO_Init+0x2b0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d85d      	bhi.n	800269e <HAL_GPIO_Init+0x12e>
 80025e2:	2b12      	cmp	r3, #18
 80025e4:	d82a      	bhi.n	800263c <HAL_GPIO_Init+0xcc>
 80025e6:	2b12      	cmp	r3, #18
 80025e8:	d859      	bhi.n	800269e <HAL_GPIO_Init+0x12e>
 80025ea:	a201      	add	r2, pc, #4	; (adr r2, 80025f0 <HAL_GPIO_Init+0x80>)
 80025ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f0:	0800266b 	.word	0x0800266b
 80025f4:	08002645 	.word	0x08002645
 80025f8:	08002657 	.word	0x08002657
 80025fc:	08002699 	.word	0x08002699
 8002600:	0800269f 	.word	0x0800269f
 8002604:	0800269f 	.word	0x0800269f
 8002608:	0800269f 	.word	0x0800269f
 800260c:	0800269f 	.word	0x0800269f
 8002610:	0800269f 	.word	0x0800269f
 8002614:	0800269f 	.word	0x0800269f
 8002618:	0800269f 	.word	0x0800269f
 800261c:	0800269f 	.word	0x0800269f
 8002620:	0800269f 	.word	0x0800269f
 8002624:	0800269f 	.word	0x0800269f
 8002628:	0800269f 	.word	0x0800269f
 800262c:	0800269f 	.word	0x0800269f
 8002630:	0800269f 	.word	0x0800269f
 8002634:	0800264d 	.word	0x0800264d
 8002638:	08002661 	.word	0x08002661
 800263c:	4a79      	ldr	r2, [pc, #484]	; (8002824 <HAL_GPIO_Init+0x2b4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d013      	beq.n	800266a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002642:	e02c      	b.n	800269e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	623b      	str	r3, [r7, #32]
          break;
 800264a:	e029      	b.n	80026a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	3304      	adds	r3, #4
 8002652:	623b      	str	r3, [r7, #32]
          break;
 8002654:	e024      	b.n	80026a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	3308      	adds	r3, #8
 800265c:	623b      	str	r3, [r7, #32]
          break;
 800265e:	e01f      	b.n	80026a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	330c      	adds	r3, #12
 8002666:	623b      	str	r3, [r7, #32]
          break;
 8002668:	e01a      	b.n	80026a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d102      	bne.n	8002678 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002672:	2304      	movs	r3, #4
 8002674:	623b      	str	r3, [r7, #32]
          break;
 8002676:	e013      	b.n	80026a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d105      	bne.n	800268c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002680:	2308      	movs	r3, #8
 8002682:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69fa      	ldr	r2, [r7, #28]
 8002688:	611a      	str	r2, [r3, #16]
          break;
 800268a:	e009      	b.n	80026a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800268c:	2308      	movs	r3, #8
 800268e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69fa      	ldr	r2, [r7, #28]
 8002694:	615a      	str	r2, [r3, #20]
          break;
 8002696:	e003      	b.n	80026a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002698:	2300      	movs	r3, #0
 800269a:	623b      	str	r3, [r7, #32]
          break;
 800269c:	e000      	b.n	80026a0 <HAL_GPIO_Init+0x130>
          break;
 800269e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	2bff      	cmp	r3, #255	; 0xff
 80026a4:	d801      	bhi.n	80026aa <HAL_GPIO_Init+0x13a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	e001      	b.n	80026ae <HAL_GPIO_Init+0x13e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3304      	adds	r3, #4
 80026ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	2bff      	cmp	r3, #255	; 0xff
 80026b4:	d802      	bhi.n	80026bc <HAL_GPIO_Init+0x14c>
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	e002      	b.n	80026c2 <HAL_GPIO_Init+0x152>
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	3b08      	subs	r3, #8
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	210f      	movs	r1, #15
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	401a      	ands	r2, r3
 80026d4:	6a39      	ldr	r1, [r7, #32]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	431a      	orrs	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 80b1 	beq.w	8002852 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026f0:	4b4d      	ldr	r3, [pc, #308]	; (8002828 <HAL_GPIO_Init+0x2b8>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	4a4c      	ldr	r2, [pc, #304]	; (8002828 <HAL_GPIO_Init+0x2b8>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6193      	str	r3, [r2, #24]
 80026fc:	4b4a      	ldr	r3, [pc, #296]	; (8002828 <HAL_GPIO_Init+0x2b8>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002708:	4a48      	ldr	r2, [pc, #288]	; (800282c <HAL_GPIO_Init+0x2bc>)
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	089b      	lsrs	r3, r3, #2
 800270e:	3302      	adds	r3, #2
 8002710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002714:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	220f      	movs	r2, #15
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4013      	ands	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a40      	ldr	r2, [pc, #256]	; (8002830 <HAL_GPIO_Init+0x2c0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d013      	beq.n	800275c <HAL_GPIO_Init+0x1ec>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a3f      	ldr	r2, [pc, #252]	; (8002834 <HAL_GPIO_Init+0x2c4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d00d      	beq.n	8002758 <HAL_GPIO_Init+0x1e8>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a3e      	ldr	r2, [pc, #248]	; (8002838 <HAL_GPIO_Init+0x2c8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d007      	beq.n	8002754 <HAL_GPIO_Init+0x1e4>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a3d      	ldr	r2, [pc, #244]	; (800283c <HAL_GPIO_Init+0x2cc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d101      	bne.n	8002750 <HAL_GPIO_Init+0x1e0>
 800274c:	2303      	movs	r3, #3
 800274e:	e006      	b.n	800275e <HAL_GPIO_Init+0x1ee>
 8002750:	2304      	movs	r3, #4
 8002752:	e004      	b.n	800275e <HAL_GPIO_Init+0x1ee>
 8002754:	2302      	movs	r3, #2
 8002756:	e002      	b.n	800275e <HAL_GPIO_Init+0x1ee>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <HAL_GPIO_Init+0x1ee>
 800275c:	2300      	movs	r3, #0
 800275e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002760:	f002 0203 	and.w	r2, r2, #3
 8002764:	0092      	lsls	r2, r2, #2
 8002766:	4093      	lsls	r3, r2
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800276e:	492f      	ldr	r1, [pc, #188]	; (800282c <HAL_GPIO_Init+0x2bc>)
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	089b      	lsrs	r3, r3, #2
 8002774:	3302      	adds	r3, #2
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d006      	beq.n	8002796 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002788:	4b2d      	ldr	r3, [pc, #180]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	492c      	ldr	r1, [pc, #176]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]
 8002794:	e006      	b.n	80027a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002796:	4b2a      	ldr	r3, [pc, #168]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	43db      	mvns	r3, r3
 800279e:	4928      	ldr	r1, [pc, #160]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d006      	beq.n	80027be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027b0:	4b23      	ldr	r3, [pc, #140]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	4922      	ldr	r1, [pc, #136]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	604b      	str	r3, [r1, #4]
 80027bc:	e006      	b.n	80027cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027be:	4b20      	ldr	r3, [pc, #128]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	491e      	ldr	r1, [pc, #120]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d006      	beq.n	80027e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027d8:	4b19      	ldr	r3, [pc, #100]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	4918      	ldr	r1, [pc, #96]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	608b      	str	r3, [r1, #8]
 80027e4:	e006      	b.n	80027f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027e6:	4b16      	ldr	r3, [pc, #88]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	4914      	ldr	r1, [pc, #80]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d021      	beq.n	8002844 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002800:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	490e      	ldr	r1, [pc, #56]	; (8002840 <HAL_GPIO_Init+0x2d0>)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	60cb      	str	r3, [r1, #12]
 800280c:	e021      	b.n	8002852 <HAL_GPIO_Init+0x2e2>
 800280e:	bf00      	nop
 8002810:	10320000 	.word	0x10320000
 8002814:	10310000 	.word	0x10310000
 8002818:	10220000 	.word	0x10220000
 800281c:	10210000 	.word	0x10210000
 8002820:	10120000 	.word	0x10120000
 8002824:	10110000 	.word	0x10110000
 8002828:	40021000 	.word	0x40021000
 800282c:	40010000 	.word	0x40010000
 8002830:	40010800 	.word	0x40010800
 8002834:	40010c00 	.word	0x40010c00
 8002838:	40011000 	.word	0x40011000
 800283c:	40011400 	.word	0x40011400
 8002840:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_GPIO_Init+0x304>)
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	43db      	mvns	r3, r3
 800284c:	4909      	ldr	r1, [pc, #36]	; (8002874 <HAL_GPIO_Init+0x304>)
 800284e:	4013      	ands	r3, r2
 8002850:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	3301      	adds	r3, #1
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	fa22 f303 	lsr.w	r3, r2, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	f47f ae8e 	bne.w	8002584 <HAL_GPIO_Init+0x14>
  }
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	372c      	adds	r7, #44	; 0x2c
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	40010400 	.word	0x40010400

08002878 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	887b      	ldrh	r3, [r7, #2]
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
 8002894:	e001      	b.n	800289a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800289a:	7bfb      	ldrb	r3, [r7, #15]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	460b      	mov	r3, r1
 80028b0:	807b      	strh	r3, [r7, #2]
 80028b2:	4613      	mov	r3, r2
 80028b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028b6:	787b      	ldrb	r3, [r7, #1]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028bc:	887a      	ldrh	r2, [r7, #2]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028c2:	e003      	b.n	80028cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028c4:	887b      	ldrh	r3, [r7, #2]
 80028c6:	041a      	lsls	r2, r3, #16
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	611a      	str	r2, [r3, #16]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr

080028d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b085      	sub	sp, #20
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	460b      	mov	r3, r1
 80028e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028e8:	887a      	ldrh	r2, [r7, #2]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4013      	ands	r3, r2
 80028ee:	041a      	lsls	r2, r3, #16
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	43d9      	mvns	r1, r3
 80028f4:	887b      	ldrh	r3, [r7, #2]
 80028f6:	400b      	ands	r3, r1
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	611a      	str	r2, [r3, #16]
}
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e272      	b.n	8002e00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 8087 	beq.w	8002a36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002928:	4b92      	ldr	r3, [pc, #584]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 030c 	and.w	r3, r3, #12
 8002930:	2b04      	cmp	r3, #4
 8002932:	d00c      	beq.n	800294e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002934:	4b8f      	ldr	r3, [pc, #572]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 030c 	and.w	r3, r3, #12
 800293c:	2b08      	cmp	r3, #8
 800293e:	d112      	bne.n	8002966 <HAL_RCC_OscConfig+0x5e>
 8002940:	4b8c      	ldr	r3, [pc, #560]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800294c:	d10b      	bne.n	8002966 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294e:	4b89      	ldr	r3, [pc, #548]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d06c      	beq.n	8002a34 <HAL_RCC_OscConfig+0x12c>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d168      	bne.n	8002a34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e24c      	b.n	8002e00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296e:	d106      	bne.n	800297e <HAL_RCC_OscConfig+0x76>
 8002970:	4b80      	ldr	r3, [pc, #512]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a7f      	ldr	r2, [pc, #508]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	e02e      	b.n	80029dc <HAL_RCC_OscConfig+0xd4>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x98>
 8002986:	4b7b      	ldr	r3, [pc, #492]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a7a      	ldr	r2, [pc, #488]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 800298c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b78      	ldr	r3, [pc, #480]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a77      	ldr	r2, [pc, #476]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e01d      	b.n	80029dc <HAL_RCC_OscConfig+0xd4>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0xbc>
 80029aa:	4b72      	ldr	r3, [pc, #456]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a71      	ldr	r2, [pc, #452]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4b6f      	ldr	r3, [pc, #444]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a6e      	ldr	r2, [pc, #440]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e00b      	b.n	80029dc <HAL_RCC_OscConfig+0xd4>
 80029c4:	4b6b      	ldr	r3, [pc, #428]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a6a      	ldr	r2, [pc, #424]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 80029ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	4b68      	ldr	r3, [pc, #416]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a67      	ldr	r2, [pc, #412]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 80029d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d013      	beq.n	8002a0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7ff fbfc 	bl	80021e0 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029ec:	f7ff fbf8 	bl	80021e0 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b64      	cmp	r3, #100	; 0x64
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e200      	b.n	8002e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	4b5d      	ldr	r3, [pc, #372]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0xe4>
 8002a0a:	e014      	b.n	8002a36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0c:	f7ff fbe8 	bl	80021e0 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a14:	f7ff fbe4 	bl	80021e0 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	; 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e1ec      	b.n	8002e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a26:	4b53      	ldr	r3, [pc, #332]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x10c>
 8002a32:	e000      	b.n	8002a36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d063      	beq.n	8002b0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a42:	4b4c      	ldr	r3, [pc, #304]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00b      	beq.n	8002a66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a4e:	4b49      	ldr	r3, [pc, #292]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d11c      	bne.n	8002a94 <HAL_RCC_OscConfig+0x18c>
 8002a5a:	4b46      	ldr	r3, [pc, #280]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d116      	bne.n	8002a94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a66:	4b43      	ldr	r3, [pc, #268]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <HAL_RCC_OscConfig+0x176>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d001      	beq.n	8002a7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e1c0      	b.n	8002e00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7e:	4b3d      	ldr	r3, [pc, #244]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4939      	ldr	r1, [pc, #228]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a92:	e03a      	b.n	8002b0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d020      	beq.n	8002ade <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a9c:	4b36      	ldr	r3, [pc, #216]	; (8002b78 <HAL_RCC_OscConfig+0x270>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa2:	f7ff fb9d 	bl	80021e0 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aaa:	f7ff fb99 	bl	80021e0 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e1a1      	b.n	8002e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abc:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac8:	4b2a      	ldr	r3, [pc, #168]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	4927      	ldr	r1, [pc, #156]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	600b      	str	r3, [r1, #0]
 8002adc:	e015      	b.n	8002b0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ade:	4b26      	ldr	r3, [pc, #152]	; (8002b78 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7ff fb7c 	bl	80021e0 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aec:	f7ff fb78 	bl	80021e0 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e180      	b.n	8002e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afe:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d03a      	beq.n	8002b8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d019      	beq.n	8002b52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b1e:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <HAL_RCC_OscConfig+0x274>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b24:	f7ff fb5c 	bl	80021e0 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b2c:	f7ff fb58 	bl	80021e0 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e160      	b.n	8002e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3e:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	f000 fad8 	bl	8003100 <RCC_Delay>
 8002b50:	e01c      	b.n	8002b8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b52:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <HAL_RCC_OscConfig+0x274>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b58:	f7ff fb42 	bl	80021e0 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b5e:	e00f      	b.n	8002b80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b60:	f7ff fb3e 	bl	80021e0 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d908      	bls.n	8002b80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e146      	b.n	8002e00 <HAL_RCC_OscConfig+0x4f8>
 8002b72:	bf00      	nop
 8002b74:	40021000 	.word	0x40021000
 8002b78:	42420000 	.word	0x42420000
 8002b7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b80:	4b92      	ldr	r3, [pc, #584]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1e9      	bne.n	8002b60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80a6 	beq.w	8002ce6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b9e:	4b8b      	ldr	r3, [pc, #556]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10d      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002baa:	4b88      	ldr	r3, [pc, #544]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	4a87      	ldr	r2, [pc, #540]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	61d3      	str	r3, [r2, #28]
 8002bb6:	4b85      	ldr	r3, [pc, #532]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	60bb      	str	r3, [r7, #8]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc6:	4b82      	ldr	r3, [pc, #520]	; (8002dd0 <HAL_RCC_OscConfig+0x4c8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d118      	bne.n	8002c04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bd2:	4b7f      	ldr	r3, [pc, #508]	; (8002dd0 <HAL_RCC_OscConfig+0x4c8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a7e      	ldr	r2, [pc, #504]	; (8002dd0 <HAL_RCC_OscConfig+0x4c8>)
 8002bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bde:	f7ff faff 	bl	80021e0 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be6:	f7ff fafb 	bl	80021e0 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b64      	cmp	r3, #100	; 0x64
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e103      	b.n	8002e00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf8:	4b75      	ldr	r3, [pc, #468]	; (8002dd0 <HAL_RCC_OscConfig+0x4c8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d106      	bne.n	8002c1a <HAL_RCC_OscConfig+0x312>
 8002c0c:	4b6f      	ldr	r3, [pc, #444]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	4a6e      	ldr	r2, [pc, #440]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	6213      	str	r3, [r2, #32]
 8002c18:	e02d      	b.n	8002c76 <HAL_RCC_OscConfig+0x36e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x334>
 8002c22:	4b6a      	ldr	r3, [pc, #424]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	4a69      	ldr	r2, [pc, #420]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002c28:	f023 0301 	bic.w	r3, r3, #1
 8002c2c:	6213      	str	r3, [r2, #32]
 8002c2e:	4b67      	ldr	r3, [pc, #412]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	4a66      	ldr	r2, [pc, #408]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002c34:	f023 0304 	bic.w	r3, r3, #4
 8002c38:	6213      	str	r3, [r2, #32]
 8002c3a:	e01c      	b.n	8002c76 <HAL_RCC_OscConfig+0x36e>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2b05      	cmp	r3, #5
 8002c42:	d10c      	bne.n	8002c5e <HAL_RCC_OscConfig+0x356>
 8002c44:	4b61      	ldr	r3, [pc, #388]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	4a60      	ldr	r2, [pc, #384]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002c4a:	f043 0304 	orr.w	r3, r3, #4
 8002c4e:	6213      	str	r3, [r2, #32]
 8002c50:	4b5e      	ldr	r3, [pc, #376]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	4a5d      	ldr	r2, [pc, #372]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6213      	str	r3, [r2, #32]
 8002c5c:	e00b      	b.n	8002c76 <HAL_RCC_OscConfig+0x36e>
 8002c5e:	4b5b      	ldr	r3, [pc, #364]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	4a5a      	ldr	r2, [pc, #360]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	6213      	str	r3, [r2, #32]
 8002c6a:	4b58      	ldr	r3, [pc, #352]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	4a57      	ldr	r2, [pc, #348]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	f023 0304 	bic.w	r3, r3, #4
 8002c74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d015      	beq.n	8002caa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7e:	f7ff faaf 	bl	80021e0 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c84:	e00a      	b.n	8002c9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c86:	f7ff faab 	bl	80021e0 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e0b1      	b.n	8002e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9c:	4b4b      	ldr	r3, [pc, #300]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0ee      	beq.n	8002c86 <HAL_RCC_OscConfig+0x37e>
 8002ca8:	e014      	b.n	8002cd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002caa:	f7ff fa99 	bl	80021e0 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb0:	e00a      	b.n	8002cc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb2:	f7ff fa95 	bl	80021e0 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e09b      	b.n	8002e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc8:	4b40      	ldr	r3, [pc, #256]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1ee      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d105      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cda:	4b3c      	ldr	r3, [pc, #240]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	4a3b      	ldr	r2, [pc, #236]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 8087 	beq.w	8002dfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cf0:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 030c 	and.w	r3, r3, #12
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d061      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d146      	bne.n	8002d92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d04:	4b33      	ldr	r3, [pc, #204]	; (8002dd4 <HAL_RCC_OscConfig+0x4cc>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0a:	f7ff fa69 	bl	80021e0 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d12:	f7ff fa65 	bl	80021e0 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e06d      	b.n	8002e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d24:	4b29      	ldr	r3, [pc, #164]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1f0      	bne.n	8002d12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d38:	d108      	bne.n	8002d4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d3a:	4b24      	ldr	r3, [pc, #144]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	4921      	ldr	r1, [pc, #132]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d4c:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a19      	ldr	r1, [r3, #32]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	491b      	ldr	r1, [pc, #108]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d64:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <HAL_RCC_OscConfig+0x4cc>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6a:	f7ff fa39 	bl	80021e0 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d72:	f7ff fa35 	bl	80021e0 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e03d      	b.n	8002e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d84:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCC_OscConfig+0x46a>
 8002d90:	e035      	b.n	8002dfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d92:	4b10      	ldr	r3, [pc, #64]	; (8002dd4 <HAL_RCC_OscConfig+0x4cc>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d98:	f7ff fa22 	bl	80021e0 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da0:	f7ff fa1e 	bl	80021e0 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e026      	b.n	8002e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x498>
 8002dbe:	e01e      	b.n	8002dfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d107      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e019      	b.n	8002e00 <HAL_RCC_OscConfig+0x4f8>
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40007000 	.word	0x40007000
 8002dd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_OscConfig+0x500>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d106      	bne.n	8002dfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d001      	beq.n	8002dfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40021000 	.word	0x40021000

08002e0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0d0      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e20:	4b6a      	ldr	r3, [pc, #424]	; (8002fcc <HAL_RCC_ClockConfig+0x1c0>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d910      	bls.n	8002e50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2e:	4b67      	ldr	r3, [pc, #412]	; (8002fcc <HAL_RCC_ClockConfig+0x1c0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f023 0207 	bic.w	r2, r3, #7
 8002e36:	4965      	ldr	r1, [pc, #404]	; (8002fcc <HAL_RCC_ClockConfig+0x1c0>)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3e:	4b63      	ldr	r3, [pc, #396]	; (8002fcc <HAL_RCC_ClockConfig+0x1c0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0b8      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d020      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e68:	4b59      	ldr	r3, [pc, #356]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	4a58      	ldr	r2, [pc, #352]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e80:	4b53      	ldr	r3, [pc, #332]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	4a52      	ldr	r2, [pc, #328]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e8c:	4b50      	ldr	r3, [pc, #320]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	494d      	ldr	r1, [pc, #308]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d040      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d107      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb2:	4b47      	ldr	r3, [pc, #284]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d115      	bne.n	8002eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e07f      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d107      	bne.n	8002eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eca:	4b41      	ldr	r3, [pc, #260]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d109      	bne.n	8002eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e073      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eda:	4b3d      	ldr	r3, [pc, #244]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e06b      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eea:	4b39      	ldr	r3, [pc, #228]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f023 0203 	bic.w	r2, r3, #3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4936      	ldr	r1, [pc, #216]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002efc:	f7ff f970 	bl	80021e0 <HAL_GetTick>
 8002f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f02:	e00a      	b.n	8002f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f04:	f7ff f96c 	bl	80021e0 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e053      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1a:	4b2d      	ldr	r3, [pc, #180]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f003 020c 	and.w	r2, r3, #12
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d1eb      	bne.n	8002f04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <HAL_RCC_ClockConfig+0x1c0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d210      	bcs.n	8002f5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <HAL_RCC_ClockConfig+0x1c0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 0207 	bic.w	r2, r3, #7
 8002f42:	4922      	ldr	r1, [pc, #136]	; (8002fcc <HAL_RCC_ClockConfig+0x1c0>)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4a:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <HAL_RCC_ClockConfig+0x1c0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e032      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f68:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4916      	ldr	r1, [pc, #88]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f86:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	490e      	ldr	r1, [pc, #56]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f9a:	f000 f821 	bl	8002fe0 <HAL_RCC_GetSysClockFreq>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	091b      	lsrs	r3, r3, #4
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	490a      	ldr	r1, [pc, #40]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fac:	5ccb      	ldrb	r3, [r1, r3]
 8002fae:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb2:	4a09      	ldr	r2, [pc, #36]	; (8002fd8 <HAL_RCC_ClockConfig+0x1cc>)
 8002fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fb6:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <HAL_RCC_ClockConfig+0x1d0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff f8ce 	bl	800215c <HAL_InitTick>

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40022000 	.word	0x40022000
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	08005338 	.word	0x08005338
 8002fd8:	20000028 	.word	0x20000028
 8002fdc:	2000002c 	.word	0x2000002c

08002fe0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe0:	b490      	push	{r4, r7}
 8002fe2:	b08a      	sub	sp, #40	; 0x28
 8002fe4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002fe6:	4b29      	ldr	r3, [pc, #164]	; (800308c <HAL_RCC_GetSysClockFreq+0xac>)
 8002fe8:	1d3c      	adds	r4, r7, #4
 8002fea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ff0:	f240 2301 	movw	r3, #513	; 0x201
 8002ff4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	2300      	movs	r3, #0
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800300a:	4b21      	ldr	r3, [pc, #132]	; (8003090 <HAL_RCC_GetSysClockFreq+0xb0>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b04      	cmp	r3, #4
 8003018:	d002      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0x40>
 800301a:	2b08      	cmp	r3, #8
 800301c:	d003      	beq.n	8003026 <HAL_RCC_GetSysClockFreq+0x46>
 800301e:	e02b      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003020:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003022:	623b      	str	r3, [r7, #32]
      break;
 8003024:	e02b      	b.n	800307e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	0c9b      	lsrs	r3, r3, #18
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	3328      	adds	r3, #40	; 0x28
 8003030:	443b      	add	r3, r7
 8003032:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003036:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d012      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003042:	4b13      	ldr	r3, [pc, #76]	; (8003090 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	0c5b      	lsrs	r3, r3, #17
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	3328      	adds	r3, #40	; 0x28
 800304e:	443b      	add	r3, r7
 8003050:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003054:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	4a0e      	ldr	r2, [pc, #56]	; (8003094 <HAL_RCC_GetSysClockFreq+0xb4>)
 800305a:	fb03 f202 	mul.w	r2, r3, r2
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	fbb2 f3f3 	udiv	r3, r2, r3
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
 8003066:	e004      	b.n	8003072 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	4a0b      	ldr	r2, [pc, #44]	; (8003098 <HAL_RCC_GetSysClockFreq+0xb8>)
 800306c:	fb02 f303 	mul.w	r3, r2, r3
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	623b      	str	r3, [r7, #32]
      break;
 8003076:	e002      	b.n	800307e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_RCC_GetSysClockFreq+0xb4>)
 800307a:	623b      	str	r3, [r7, #32]
      break;
 800307c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800307e:	6a3b      	ldr	r3, [r7, #32]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3728      	adds	r7, #40	; 0x28
 8003084:	46bd      	mov	sp, r7
 8003086:	bc90      	pop	{r4, r7}
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	08005328 	.word	0x08005328
 8003090:	40021000 	.word	0x40021000
 8003094:	007a1200 	.word	0x007a1200
 8003098:	003d0900 	.word	0x003d0900

0800309c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030a0:	4b02      	ldr	r3, [pc, #8]	; (80030ac <HAL_RCC_GetHCLKFreq+0x10>)
 80030a2:	681b      	ldr	r3, [r3, #0]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	20000028 	.word	0x20000028

080030b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030b4:	f7ff fff2 	bl	800309c <HAL_RCC_GetHCLKFreq>
 80030b8:	4602      	mov	r2, r0
 80030ba:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	0a1b      	lsrs	r3, r3, #8
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	4903      	ldr	r1, [pc, #12]	; (80030d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030c6:	5ccb      	ldrb	r3, [r1, r3]
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40021000 	.word	0x40021000
 80030d4:	08005348 	.word	0x08005348

080030d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030dc:	f7ff ffde 	bl	800309c <HAL_RCC_GetHCLKFreq>
 80030e0:	4602      	mov	r2, r0
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	0adb      	lsrs	r3, r3, #11
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	4903      	ldr	r1, [pc, #12]	; (80030fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ee:	5ccb      	ldrb	r3, [r1, r3]
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40021000 	.word	0x40021000
 80030fc:	08005348 	.word	0x08005348

08003100 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003108:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <RCC_Delay+0x34>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <RCC_Delay+0x38>)
 800310e:	fba2 2303 	umull	r2, r3, r2, r3
 8003112:	0a5b      	lsrs	r3, r3, #9
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	fb02 f303 	mul.w	r3, r2, r3
 800311a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800311c:	bf00      	nop
  }
  while (Delay --);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1e5a      	subs	r2, r3, #1
 8003122:	60fa      	str	r2, [r7, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f9      	bne.n	800311c <RCC_Delay+0x1c>
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr
 8003134:	20000028 	.word	0x20000028
 8003138:	10624dd3 	.word	0x10624dd3

0800313c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e041      	b.n	80031d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fe fa58 	bl	8001618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f000 fc28 	bl	80039d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d001      	beq.n	80031f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e03a      	b.n	800326a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a18      	ldr	r2, [pc, #96]	; (8003274 <HAL_TIM_Base_Start_IT+0x98>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00e      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x58>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321e:	d009      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x58>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a14      	ldr	r2, [pc, #80]	; (8003278 <HAL_TIM_Base_Start_IT+0x9c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d004      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x58>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a13      	ldr	r2, [pc, #76]	; (800327c <HAL_TIM_Base_Start_IT+0xa0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d111      	bne.n	8003258 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b06      	cmp	r3, #6
 8003244:	d010      	beq.n	8003268 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0201 	orr.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003256:	e007      	b.n	8003268 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	40012c00 	.word	0x40012c00
 8003278:	40000400 	.word	0x40000400
 800327c:	40000800 	.word	0x40000800

08003280 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e041      	b.n	8003316 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f839 	bl	800331e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3304      	adds	r3, #4
 80032bc:	4619      	mov	r1, r3
 80032be:	4610      	mov	r0, r2
 80032c0:	f000 fb86 	bl	80039d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d109      	bne.n	8003354 <HAL_TIM_PWM_Start+0x24>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b01      	cmp	r3, #1
 800334a:	bf14      	ite	ne
 800334c:	2301      	movne	r3, #1
 800334e:	2300      	moveq	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	e022      	b.n	800339a <HAL_TIM_PWM_Start+0x6a>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b04      	cmp	r3, #4
 8003358:	d109      	bne.n	800336e <HAL_TIM_PWM_Start+0x3e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b01      	cmp	r3, #1
 8003364:	bf14      	ite	ne
 8003366:	2301      	movne	r3, #1
 8003368:	2300      	moveq	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	e015      	b.n	800339a <HAL_TIM_PWM_Start+0x6a>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d109      	bne.n	8003388 <HAL_TIM_PWM_Start+0x58>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b01      	cmp	r3, #1
 800337e:	bf14      	ite	ne
 8003380:	2301      	movne	r3, #1
 8003382:	2300      	moveq	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	e008      	b.n	800339a <HAL_TIM_PWM_Start+0x6a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	bf14      	ite	ne
 8003394:	2301      	movne	r3, #1
 8003396:	2300      	moveq	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e05e      	b.n	8003460 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d104      	bne.n	80033b2 <HAL_TIM_PWM_Start+0x82>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033b0:	e013      	b.n	80033da <HAL_TIM_PWM_Start+0xaa>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d104      	bne.n	80033c2 <HAL_TIM_PWM_Start+0x92>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c0:	e00b      	b.n	80033da <HAL_TIM_PWM_Start+0xaa>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d104      	bne.n	80033d2 <HAL_TIM_PWM_Start+0xa2>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033d0:	e003      	b.n	80033da <HAL_TIM_PWM_Start+0xaa>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2202      	movs	r2, #2
 80033d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2201      	movs	r2, #1
 80033e0:	6839      	ldr	r1, [r7, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fd74 	bl	8003ed0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1e      	ldr	r2, [pc, #120]	; (8003468 <HAL_TIM_PWM_Start+0x138>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d107      	bne.n	8003402 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003400:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a18      	ldr	r2, [pc, #96]	; (8003468 <HAL_TIM_PWM_Start+0x138>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d00e      	beq.n	800342a <HAL_TIM_PWM_Start+0xfa>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003414:	d009      	beq.n	800342a <HAL_TIM_PWM_Start+0xfa>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a14      	ldr	r2, [pc, #80]	; (800346c <HAL_TIM_PWM_Start+0x13c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d004      	beq.n	800342a <HAL_TIM_PWM_Start+0xfa>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a12      	ldr	r2, [pc, #72]	; (8003470 <HAL_TIM_PWM_Start+0x140>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d111      	bne.n	800344e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b06      	cmp	r3, #6
 800343a:	d010      	beq.n	800345e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344c:	e007      	b.n	800345e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0201 	orr.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40012c00 	.word	0x40012c00
 800346c:	40000400 	.word	0x40000400
 8003470:	40000800 	.word	0x40000800

08003474 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b02      	cmp	r3, #2
 8003488:	d122      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b02      	cmp	r3, #2
 8003496:	d11b      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0202 	mvn.w	r2, #2
 80034a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fa6f 	bl	800399a <HAL_TIM_IC_CaptureCallback>
 80034bc:	e005      	b.n	80034ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fa62 	bl	8003988 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fa71 	bl	80039ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d122      	bne.n	8003524 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d11b      	bne.n	8003524 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0204 	mvn.w	r2, #4
 80034f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2202      	movs	r2, #2
 80034fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fa45 	bl	800399a <HAL_TIM_IC_CaptureCallback>
 8003510:	e005      	b.n	800351e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fa38 	bl	8003988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 fa47 	bl	80039ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b08      	cmp	r3, #8
 8003530:	d122      	bne.n	8003578 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b08      	cmp	r3, #8
 800353e:	d11b      	bne.n	8003578 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0208 	mvn.w	r2, #8
 8003548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2204      	movs	r2, #4
 800354e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fa1b 	bl	800399a <HAL_TIM_IC_CaptureCallback>
 8003564:	e005      	b.n	8003572 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fa0e 	bl	8003988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fa1d 	bl	80039ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	f003 0310 	and.w	r3, r3, #16
 8003582:	2b10      	cmp	r3, #16
 8003584:	d122      	bne.n	80035cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	2b10      	cmp	r3, #16
 8003592:	d11b      	bne.n	80035cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f06f 0210 	mvn.w	r2, #16
 800359c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2208      	movs	r2, #8
 80035a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f9f1 	bl	800399a <HAL_TIM_IC_CaptureCallback>
 80035b8:	e005      	b.n	80035c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f9e4 	bl	8003988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f9f3 	bl	80039ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d10e      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d107      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f06f 0201 	mvn.w	r2, #1
 80035f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fd fe3e 	bl	8001274 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b80      	cmp	r3, #128	; 0x80
 8003604:	d10e      	bne.n	8003624 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003610:	2b80      	cmp	r3, #128	; 0x80
 8003612:	d107      	bne.n	8003624 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800361c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fce1 	bl	8003fe6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362e:	2b40      	cmp	r3, #64	; 0x40
 8003630:	d10e      	bne.n	8003650 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363c:	2b40      	cmp	r3, #64	; 0x40
 800363e:	d107      	bne.n	8003650 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f9b7 	bl	80039be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b20      	cmp	r3, #32
 800365c:	d10e      	bne.n	800367c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b20      	cmp	r3, #32
 800366a:	d107      	bne.n	800367c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f06f 0220 	mvn.w	r2, #32
 8003674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fcac 	bl	8003fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800367c:	bf00      	nop
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800369a:	2302      	movs	r3, #2
 800369c:	e0ac      	b.n	80037f8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b0c      	cmp	r3, #12
 80036aa:	f200 809f 	bhi.w	80037ec <HAL_TIM_PWM_ConfigChannel+0x168>
 80036ae:	a201      	add	r2, pc, #4	; (adr r2, 80036b4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80036b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b4:	080036e9 	.word	0x080036e9
 80036b8:	080037ed 	.word	0x080037ed
 80036bc:	080037ed 	.word	0x080037ed
 80036c0:	080037ed 	.word	0x080037ed
 80036c4:	08003729 	.word	0x08003729
 80036c8:	080037ed 	.word	0x080037ed
 80036cc:	080037ed 	.word	0x080037ed
 80036d0:	080037ed 	.word	0x080037ed
 80036d4:	0800376b 	.word	0x0800376b
 80036d8:	080037ed 	.word	0x080037ed
 80036dc:	080037ed 	.word	0x080037ed
 80036e0:	080037ed 	.word	0x080037ed
 80036e4:	080037ab 	.word	0x080037ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68b9      	ldr	r1, [r7, #8]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f9d0 	bl	8003a94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699a      	ldr	r2, [r3, #24]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0208 	orr.w	r2, r2, #8
 8003702:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0204 	bic.w	r2, r2, #4
 8003712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6999      	ldr	r1, [r3, #24]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	619a      	str	r2, [r3, #24]
      break;
 8003726:	e062      	b.n	80037ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fa16 	bl	8003b60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6999      	ldr	r1, [r3, #24]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	021a      	lsls	r2, r3, #8
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	619a      	str	r2, [r3, #24]
      break;
 8003768:	e041      	b.n	80037ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68b9      	ldr	r1, [r7, #8]
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fa5f 	bl	8003c34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	69da      	ldr	r2, [r3, #28]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f042 0208 	orr.w	r2, r2, #8
 8003784:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69da      	ldr	r2, [r3, #28]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0204 	bic.w	r2, r2, #4
 8003794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69d9      	ldr	r1, [r3, #28]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	61da      	str	r2, [r3, #28]
      break;
 80037a8:	e021      	b.n	80037ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68b9      	ldr	r1, [r7, #8]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 faa9 	bl	8003d08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	69da      	ldr	r2, [r3, #28]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69da      	ldr	r2, [r3, #28]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69d9      	ldr	r1, [r3, #28]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	021a      	lsls	r2, r3, #8
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	61da      	str	r2, [r3, #28]
      break;
 80037ea:	e000      	b.n	80037ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80037ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_TIM_ConfigClockSource+0x18>
 8003814:	2302      	movs	r3, #2
 8003816:	e0b3      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x180>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003836:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800383e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003850:	d03e      	beq.n	80038d0 <HAL_TIM_ConfigClockSource+0xd0>
 8003852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003856:	f200 8087 	bhi.w	8003968 <HAL_TIM_ConfigClockSource+0x168>
 800385a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800385e:	f000 8085 	beq.w	800396c <HAL_TIM_ConfigClockSource+0x16c>
 8003862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003866:	d87f      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x168>
 8003868:	2b70      	cmp	r3, #112	; 0x70
 800386a:	d01a      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0xa2>
 800386c:	2b70      	cmp	r3, #112	; 0x70
 800386e:	d87b      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x168>
 8003870:	2b60      	cmp	r3, #96	; 0x60
 8003872:	d050      	beq.n	8003916 <HAL_TIM_ConfigClockSource+0x116>
 8003874:	2b60      	cmp	r3, #96	; 0x60
 8003876:	d877      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x168>
 8003878:	2b50      	cmp	r3, #80	; 0x50
 800387a:	d03c      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0xf6>
 800387c:	2b50      	cmp	r3, #80	; 0x50
 800387e:	d873      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x168>
 8003880:	2b40      	cmp	r3, #64	; 0x40
 8003882:	d058      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0x136>
 8003884:	2b40      	cmp	r3, #64	; 0x40
 8003886:	d86f      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x168>
 8003888:	2b30      	cmp	r3, #48	; 0x30
 800388a:	d064      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x156>
 800388c:	2b30      	cmp	r3, #48	; 0x30
 800388e:	d86b      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x168>
 8003890:	2b20      	cmp	r3, #32
 8003892:	d060      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x156>
 8003894:	2b20      	cmp	r3, #32
 8003896:	d867      	bhi.n	8003968 <HAL_TIM_ConfigClockSource+0x168>
 8003898:	2b00      	cmp	r3, #0
 800389a:	d05c      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x156>
 800389c:	2b10      	cmp	r3, #16
 800389e:	d05a      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80038a0:	e062      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6899      	ldr	r1, [r3, #8]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f000 faee 	bl	8003e92 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	609a      	str	r2, [r3, #8]
      break;
 80038ce:	e04e      	b.n	800396e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	6899      	ldr	r1, [r3, #8]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f000 fad7 	bl	8003e92 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038f2:	609a      	str	r2, [r3, #8]
      break;
 80038f4:	e03b      	b.n	800396e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	6859      	ldr	r1, [r3, #4]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	461a      	mov	r2, r3
 8003904:	f000 fa4e 	bl	8003da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2150      	movs	r1, #80	; 0x50
 800390e:	4618      	mov	r0, r3
 8003910:	f000 faa5 	bl	8003e5e <TIM_ITRx_SetConfig>
      break;
 8003914:	e02b      	b.n	800396e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6818      	ldr	r0, [r3, #0]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	6859      	ldr	r1, [r3, #4]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	461a      	mov	r2, r3
 8003924:	f000 fa6c 	bl	8003e00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2160      	movs	r1, #96	; 0x60
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fa95 	bl	8003e5e <TIM_ITRx_SetConfig>
      break;
 8003934:	e01b      	b.n	800396e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6859      	ldr	r1, [r3, #4]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	461a      	mov	r2, r3
 8003944:	f000 fa2e 	bl	8003da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2140      	movs	r1, #64	; 0x40
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fa85 	bl	8003e5e <TIM_ITRx_SetConfig>
      break;
 8003954:	e00b      	b.n	800396e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4619      	mov	r1, r3
 8003960:	4610      	mov	r0, r2
 8003962:	f000 fa7c 	bl	8003e5e <TIM_ITRx_SetConfig>
        break;
 8003966:	e002      	b.n	800396e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003968:	bf00      	nop
 800396a:	e000      	b.n	800396e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800396c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr

0800399a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr

080039ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr

080039be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr

080039d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a29      	ldr	r2, [pc, #164]	; (8003a88 <TIM_Base_SetConfig+0xb8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d00b      	beq.n	8003a00 <TIM_Base_SetConfig+0x30>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ee:	d007      	beq.n	8003a00 <TIM_Base_SetConfig+0x30>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a26      	ldr	r2, [pc, #152]	; (8003a8c <TIM_Base_SetConfig+0xbc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d003      	beq.n	8003a00 <TIM_Base_SetConfig+0x30>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a25      	ldr	r2, [pc, #148]	; (8003a90 <TIM_Base_SetConfig+0xc0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d108      	bne.n	8003a12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a1c      	ldr	r2, [pc, #112]	; (8003a88 <TIM_Base_SetConfig+0xb8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d00b      	beq.n	8003a32 <TIM_Base_SetConfig+0x62>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a20:	d007      	beq.n	8003a32 <TIM_Base_SetConfig+0x62>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a19      	ldr	r2, [pc, #100]	; (8003a8c <TIM_Base_SetConfig+0xbc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d003      	beq.n	8003a32 <TIM_Base_SetConfig+0x62>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a18      	ldr	r2, [pc, #96]	; (8003a90 <TIM_Base_SetConfig+0xc0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d108      	bne.n	8003a44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a07      	ldr	r2, [pc, #28]	; (8003a88 <TIM_Base_SetConfig+0xb8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d103      	bne.n	8003a78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	615a      	str	r2, [r3, #20]
}
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	40000800 	.word	0x40000800

08003a94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	f023 0201 	bic.w	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 0303 	bic.w	r3, r3, #3
 8003aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f023 0302 	bic.w	r3, r3, #2
 8003adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a1c      	ldr	r2, [pc, #112]	; (8003b5c <TIM_OC1_SetConfig+0xc8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d10c      	bne.n	8003b0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f023 0308 	bic.w	r3, r3, #8
 8003af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f023 0304 	bic.w	r3, r3, #4
 8003b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a13      	ldr	r2, [pc, #76]	; (8003b5c <TIM_OC1_SetConfig+0xc8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d111      	bne.n	8003b36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	621a      	str	r2, [r3, #32]
}
 8003b50:	bf00      	nop
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40012c00 	.word	0x40012c00

08003b60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	f023 0210 	bic.w	r2, r3, #16
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f023 0320 	bic.w	r3, r3, #32
 8003baa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a1d      	ldr	r2, [pc, #116]	; (8003c30 <TIM_OC2_SetConfig+0xd0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d10d      	bne.n	8003bdc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a14      	ldr	r2, [pc, #80]	; (8003c30 <TIM_OC2_SetConfig+0xd0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d113      	bne.n	8003c0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	621a      	str	r2, [r3, #32]
}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr
 8003c30:	40012c00 	.word	0x40012c00

08003c34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0303 	bic.w	r3, r3, #3
 8003c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	021b      	lsls	r3, r3, #8
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a1d      	ldr	r2, [pc, #116]	; (8003d04 <TIM_OC3_SetConfig+0xd0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d10d      	bne.n	8003cae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	021b      	lsls	r3, r3, #8
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a14      	ldr	r2, [pc, #80]	; (8003d04 <TIM_OC3_SetConfig+0xd0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d113      	bne.n	8003cde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	621a      	str	r2, [r3, #32]
}
 8003cf8:	bf00      	nop
 8003cfa:	371c      	adds	r7, #28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40012c00 	.word	0x40012c00

08003d08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	021b      	lsls	r3, r3, #8
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	031b      	lsls	r3, r3, #12
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a0f      	ldr	r2, [pc, #60]	; (8003da0 <TIM_OC4_SetConfig+0x98>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d109      	bne.n	8003d7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	019b      	lsls	r3, r3, #6
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	621a      	str	r2, [r3, #32]
}
 8003d96:	bf00      	nop
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr
 8003da0:	40012c00 	.word	0x40012c00

08003da4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f023 0201 	bic.w	r2, r3, #1
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f023 030a 	bic.w	r3, r3, #10
 8003de0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	621a      	str	r2, [r3, #32]
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr

08003e00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	f023 0210 	bic.w	r2, r3, #16
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	031b      	lsls	r3, r3, #12
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	621a      	str	r2, [r3, #32]
}
 8003e54:	bf00      	nop
 8003e56:	371c      	adds	r7, #28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr

08003e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b085      	sub	sp, #20
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f043 0307 	orr.w	r3, r3, #7
 8003e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	609a      	str	r2, [r3, #8]
}
 8003e88:	bf00      	nop
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr

08003e92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b087      	sub	sp, #28
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	021a      	lsls	r2, r3, #8
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	609a      	str	r2, [r3, #8]
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr

08003ed0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f003 031f 	and.w	r3, r3, #31
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a1a      	ldr	r2, [r3, #32]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	401a      	ands	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a1a      	ldr	r2, [r3, #32]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	fa01 f303 	lsl.w	r3, r1, r3
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	621a      	str	r2, [r3, #32]
}
 8003f0e:	bf00      	nop
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr

08003f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e046      	b.n	8003fbe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a16      	ldr	r2, [pc, #88]	; (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00e      	beq.n	8003f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7c:	d009      	beq.n	8003f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a12      	ldr	r2, [pc, #72]	; (8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d004      	beq.n	8003f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a10      	ldr	r2, [pc, #64]	; (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d10c      	bne.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr
 8003fc8:	40012c00 	.word	0x40012c00
 8003fcc:	40000400 	.word	0x40000400
 8003fd0:	40000800 	.word	0x40000800

08003fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e03f      	b.n	800408a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fd fb64 	bl	80016ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2224      	movs	r2, #36	; 0x24
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800403a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 fc25 	bl	800488c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695a      	ldr	r2, [r3, #20]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b08a      	sub	sp, #40	; 0x28
 8004096:	af02      	add	r7, sp, #8
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	603b      	str	r3, [r7, #0]
 800409e:	4613      	mov	r3, r2
 80040a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	d17c      	bne.n	80041ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <HAL_UART_Transmit+0x2c>
 80040b8:	88fb      	ldrh	r3, [r7, #6]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e075      	b.n	80041ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_UART_Transmit+0x3e>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e06e      	b.n	80041ae <HAL_UART_Transmit+0x11c>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2221      	movs	r2, #33	; 0x21
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040e6:	f7fe f87b 	bl	80021e0 <HAL_GetTick>
 80040ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	88fa      	ldrh	r2, [r7, #6]
 80040f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	88fa      	ldrh	r2, [r7, #6]
 80040f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004100:	d108      	bne.n	8004114 <HAL_UART_Transmit+0x82>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d104      	bne.n	8004114 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800410a:	2300      	movs	r3, #0
 800410c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	e003      	b.n	800411c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004118:	2300      	movs	r3, #0
 800411a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004124:	e02a      	b.n	800417c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2200      	movs	r2, #0
 800412e:	2180      	movs	r1, #128	; 0x80
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 fa11 	bl	8004558 <UART_WaitOnFlagUntilTimeout>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e036      	b.n	80041ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004154:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	3302      	adds	r3, #2
 800415a:	61bb      	str	r3, [r7, #24]
 800415c:	e007      	b.n	800416e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	781a      	ldrb	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	3301      	adds	r3, #1
 800416c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1cf      	bne.n	8004126 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2200      	movs	r2, #0
 800418e:	2140      	movs	r1, #64	; 0x40
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 f9e1 	bl	8004558 <UART_WaitOnFlagUntilTimeout>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e006      	b.n	80041ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	e000      	b.n	80041ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041ac:	2302      	movs	r3, #2
  }
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08a      	sub	sp, #40	; 0x28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80041d8:	2300      	movs	r3, #0
 80041da:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10d      	bne.n	800420a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d008      	beq.n	800420a <HAL_UART_IRQHandler+0x52>
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fa99 	bl	800473a <UART_Receive_IT>
      return;
 8004208:	e17b      	b.n	8004502 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 80b1 	beq.w	8004374 <HAL_UART_IRQHandler+0x1bc>
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d105      	bne.n	8004228 <HAL_UART_IRQHandler+0x70>
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 80a6 	beq.w	8004374 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <HAL_UART_IRQHandler+0x90>
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	f043 0201 	orr.w	r2, r3, #1
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <HAL_UART_IRQHandler+0xb0>
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	f043 0202 	orr.w	r2, r3, #2
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <HAL_UART_IRQHandler+0xd0>
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	f043 0204 	orr.w	r2, r3, #4
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00f      	beq.n	80042b2 <HAL_UART_IRQHandler+0xfa>
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d104      	bne.n	80042a6 <HAL_UART_IRQHandler+0xee>
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d005      	beq.n	80042b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f043 0208 	orr.w	r2, r3, #8
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 811e 	beq.w	80044f8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d007      	beq.n	80042d6 <HAL_UART_IRQHandler+0x11e>
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 fa32 	bl	800473a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bf14      	ite	ne
 80042e4:	2301      	movne	r3, #1
 80042e6:	2300      	moveq	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <HAL_UART_IRQHandler+0x146>
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d031      	beq.n	8004362 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f974 	bl	80045ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430e:	2b00      	cmp	r3, #0
 8004310:	d023      	beq.n	800435a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695a      	ldr	r2, [r3, #20]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004320:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004326:	2b00      	cmp	r3, #0
 8004328:	d013      	beq.n	8004352 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	4a76      	ldr	r2, [pc, #472]	; (8004508 <HAL_UART_IRQHandler+0x350>)
 8004330:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004336:	4618      	mov	r0, r3
 8004338:	f7fe f8a4 	bl	8002484 <HAL_DMA_Abort_IT>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d016      	beq.n	8004370 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800434c:	4610      	mov	r0, r2
 800434e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004350:	e00e      	b.n	8004370 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f8ec 	bl	8004530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004358:	e00a      	b.n	8004370 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f8e8 	bl	8004530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004360:	e006      	b.n	8004370 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f8e4 	bl	8004530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800436e:	e0c3      	b.n	80044f8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004370:	bf00      	nop
    return;
 8004372:	e0c1      	b.n	80044f8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	2b01      	cmp	r3, #1
 800437a:	f040 80a1 	bne.w	80044c0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 809b 	beq.w	80044c0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 8095 	beq.w	80044c0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004396:	2300      	movs	r3, #0
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d04e      	beq.n	8004458 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80043c4:	8a3b      	ldrh	r3, [r7, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 8098 	beq.w	80044fc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043d0:	8a3a      	ldrh	r2, [r7, #16]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	f080 8092 	bcs.w	80044fc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	8a3a      	ldrh	r2, [r7, #16]
 80043dc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	2b20      	cmp	r3, #32
 80043e6:	d02b      	beq.n	8004440 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043f6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695a      	ldr	r2, [r3, #20]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0201 	bic.w	r2, r2, #1
 8004406:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695a      	ldr	r2, [r3, #20]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004416:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0210 	bic.w	r2, r2, #16
 8004434:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443a:	4618      	mov	r0, r3
 800443c:	f7fd ffe7 	bl	800240e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004448:	b29b      	uxth	r3, r3
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	b29b      	uxth	r3, r3
 800444e:	4619      	mov	r1, r3
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f876 	bl	8004542 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004456:	e051      	b.n	80044fc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004460:	b29b      	uxth	r3, r3
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d047      	beq.n	8004500 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004470:	8a7b      	ldrh	r3, [r7, #18]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d044      	beq.n	8004500 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004484:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695a      	ldr	r2, [r3, #20]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0201 	bic.w	r2, r2, #1
 8004494:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0210 	bic.w	r2, r2, #16
 80044b2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044b4:	8a7b      	ldrh	r3, [r7, #18]
 80044b6:	4619      	mov	r1, r3
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f842 	bl	8004542 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80044be:	e01f      	b.n	8004500 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d008      	beq.n	80044dc <HAL_UART_IRQHandler+0x324>
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f8c9 	bl	800466c <UART_Transmit_IT>
    return;
 80044da:	e012      	b.n	8004502 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00d      	beq.n	8004502 <HAL_UART_IRQHandler+0x34a>
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f90a 	bl	800470a <UART_EndTransmit_IT>
    return;
 80044f6:	e004      	b.n	8004502 <HAL_UART_IRQHandler+0x34a>
    return;
 80044f8:	bf00      	nop
 80044fa:	e002      	b.n	8004502 <HAL_UART_IRQHandler+0x34a>
      return;
 80044fc:	bf00      	nop
 80044fe:	e000      	b.n	8004502 <HAL_UART_IRQHandler+0x34a>
      return;
 8004500:	bf00      	nop
  }
}
 8004502:	3728      	adds	r7, #40	; 0x28
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	08004645 	.word	0x08004645

0800450c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr

0800451e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr

08004542 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	460b      	mov	r3, r1
 800454c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	4613      	mov	r3, r2
 8004566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004568:	e02c      	b.n	80045c4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004570:	d028      	beq.n	80045c4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d007      	beq.n	8004588 <UART_WaitOnFlagUntilTimeout+0x30>
 8004578:	f7fd fe32 	bl	80021e0 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	429a      	cmp	r2, r3
 8004586:	d21d      	bcs.n	80045c4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004596:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695a      	ldr	r2, [r3, #20]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0201 	bic.w	r2, r2, #1
 80045a6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e00f      	b.n	80045e4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	4013      	ands	r3, r2
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	bf0c      	ite	eq
 80045d4:	2301      	moveq	r3, #1
 80045d6:	2300      	movne	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	461a      	mov	r2, r3
 80045dc:	79fb      	ldrb	r3, [r7, #7]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d0c3      	beq.n	800456a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004602:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695a      	ldr	r2, [r3, #20]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0201 	bic.w	r2, r2, #1
 8004612:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	2b01      	cmp	r3, #1
 800461a:	d107      	bne.n	800462c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0210 	bic.w	r2, r2, #16
 800462a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	631a      	str	r2, [r3, #48]	; 0x30
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr

08004644 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f7ff ff66 	bl	8004530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004664:	bf00      	nop
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b21      	cmp	r3, #33	; 0x21
 800467e:	d13e      	bne.n	80046fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004688:	d114      	bne.n	80046b4 <UART_Transmit_IT+0x48>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d110      	bne.n	80046b4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	461a      	mov	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	1c9a      	adds	r2, r3, #2
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	621a      	str	r2, [r3, #32]
 80046b2:	e008      	b.n	80046c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	1c59      	adds	r1, r3, #1
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6211      	str	r1, [r2, #32]
 80046be:	781a      	ldrb	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	4619      	mov	r1, r3
 80046d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10f      	bne.n	80046fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68da      	ldr	r2, [r3, #12]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	e000      	b.n	8004700 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046fe:	2302      	movs	r3, #2
  }
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr

0800470a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b082      	sub	sp, #8
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004720:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7ff feee 	bl	800450c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b086      	sub	sp, #24
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b22      	cmp	r3, #34	; 0x22
 800474c:	f040 8099 	bne.w	8004882 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004758:	d117      	bne.n	800478a <UART_Receive_IT+0x50>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d113      	bne.n	800478a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004762:	2300      	movs	r3, #0
 8004764:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	b29b      	uxth	r3, r3
 8004774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004778:	b29a      	uxth	r2, r3
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004782:	1c9a      	adds	r2, r3, #2
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	629a      	str	r2, [r3, #40]	; 0x28
 8004788:	e026      	b.n	80047d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004790:	2300      	movs	r3, #0
 8004792:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479c:	d007      	beq.n	80047ae <UART_Receive_IT+0x74>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10a      	bne.n	80047bc <UART_Receive_IT+0x82>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	701a      	strb	r2, [r3, #0]
 80047ba:	e008      	b.n	80047ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047dc:	b29b      	uxth	r3, r3
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	4619      	mov	r1, r3
 80047e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d148      	bne.n	800487e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0220 	bic.w	r2, r2, #32
 80047fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800480a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0201 	bic.w	r2, r2, #1
 800481a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	2b01      	cmp	r3, #1
 800482a:	d123      	bne.n	8004874 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0210 	bic.w	r2, r2, #16
 8004840:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	2b10      	cmp	r3, #16
 800484e:	d10a      	bne.n	8004866 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004850:	2300      	movs	r3, #0
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800486a:	4619      	mov	r1, r3
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff fe68 	bl	8004542 <HAL_UARTEx_RxEventCallback>
 8004872:	e002      	b.n	800487a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff fe52 	bl	800451e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	e002      	b.n	8004884 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	e000      	b.n	8004884 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004882:	2302      	movs	r3, #2
  }
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80048c6:	f023 030c 	bic.w	r3, r3, #12
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6812      	ldr	r2, [r2, #0]
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	430b      	orrs	r3, r1
 80048d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699a      	ldr	r2, [r3, #24]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a2c      	ldr	r2, [pc, #176]	; (80049a0 <UART_SetConfig+0x114>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d103      	bne.n	80048fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80048f4:	f7fe fbf0 	bl	80030d8 <HAL_RCC_GetPCLK2Freq>
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	e002      	b.n	8004902 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80048fc:	f7fe fbd8 	bl	80030b0 <HAL_RCC_GetPCLK1Freq>
 8004900:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	009a      	lsls	r2, r3, #2
 800490c:	441a      	add	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	fbb2 f3f3 	udiv	r3, r2, r3
 8004918:	4a22      	ldr	r2, [pc, #136]	; (80049a4 <UART_SetConfig+0x118>)
 800491a:	fba2 2303 	umull	r2, r3, r2, r3
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	0119      	lsls	r1, r3, #4
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	009a      	lsls	r2, r3, #2
 800492c:	441a      	add	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	fbb2 f2f3 	udiv	r2, r2, r3
 8004938:	4b1a      	ldr	r3, [pc, #104]	; (80049a4 <UART_SetConfig+0x118>)
 800493a:	fba3 0302 	umull	r0, r3, r3, r2
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	2064      	movs	r0, #100	; 0x64
 8004942:	fb00 f303 	mul.w	r3, r0, r3
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	3332      	adds	r3, #50	; 0x32
 800494c:	4a15      	ldr	r2, [pc, #84]	; (80049a4 <UART_SetConfig+0x118>)
 800494e:	fba2 2303 	umull	r2, r3, r2, r3
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004958:	4419      	add	r1, r3
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4613      	mov	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	009a      	lsls	r2, r3, #2
 8004964:	441a      	add	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004970:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <UART_SetConfig+0x118>)
 8004972:	fba3 0302 	umull	r0, r3, r3, r2
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	2064      	movs	r0, #100	; 0x64
 800497a:	fb00 f303 	mul.w	r3, r0, r3
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	3332      	adds	r3, #50	; 0x32
 8004984:	4a07      	ldr	r2, [pc, #28]	; (80049a4 <UART_SetConfig+0x118>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	f003 020f 	and.w	r2, r3, #15
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	440a      	add	r2, r1
 8004996:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004998:	bf00      	nop
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40013800 	.word	0x40013800
 80049a4:	51eb851f 	.word	0x51eb851f

080049a8 <__errno>:
 80049a8:	4b01      	ldr	r3, [pc, #4]	; (80049b0 <__errno+0x8>)
 80049aa:	6818      	ldr	r0, [r3, #0]
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	20000034 	.word	0x20000034

080049b4 <__libc_init_array>:
 80049b4:	b570      	push	{r4, r5, r6, lr}
 80049b6:	2600      	movs	r6, #0
 80049b8:	4d0c      	ldr	r5, [pc, #48]	; (80049ec <__libc_init_array+0x38>)
 80049ba:	4c0d      	ldr	r4, [pc, #52]	; (80049f0 <__libc_init_array+0x3c>)
 80049bc:	1b64      	subs	r4, r4, r5
 80049be:	10a4      	asrs	r4, r4, #2
 80049c0:	42a6      	cmp	r6, r4
 80049c2:	d109      	bne.n	80049d8 <__libc_init_array+0x24>
 80049c4:	f000 fc9c 	bl	8005300 <_init>
 80049c8:	2600      	movs	r6, #0
 80049ca:	4d0a      	ldr	r5, [pc, #40]	; (80049f4 <__libc_init_array+0x40>)
 80049cc:	4c0a      	ldr	r4, [pc, #40]	; (80049f8 <__libc_init_array+0x44>)
 80049ce:	1b64      	subs	r4, r4, r5
 80049d0:	10a4      	asrs	r4, r4, #2
 80049d2:	42a6      	cmp	r6, r4
 80049d4:	d105      	bne.n	80049e2 <__libc_init_array+0x2e>
 80049d6:	bd70      	pop	{r4, r5, r6, pc}
 80049d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049dc:	4798      	blx	r3
 80049de:	3601      	adds	r6, #1
 80049e0:	e7ee      	b.n	80049c0 <__libc_init_array+0xc>
 80049e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e6:	4798      	blx	r3
 80049e8:	3601      	adds	r6, #1
 80049ea:	e7f2      	b.n	80049d2 <__libc_init_array+0x1e>
 80049ec:	08005384 	.word	0x08005384
 80049f0:	08005384 	.word	0x08005384
 80049f4:	08005384 	.word	0x08005384
 80049f8:	08005388 	.word	0x08005388

080049fc <memset>:
 80049fc:	4603      	mov	r3, r0
 80049fe:	4402      	add	r2, r0
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d100      	bne.n	8004a06 <memset+0xa>
 8004a04:	4770      	bx	lr
 8004a06:	f803 1b01 	strb.w	r1, [r3], #1
 8004a0a:	e7f9      	b.n	8004a00 <memset+0x4>

08004a0c <siprintf>:
 8004a0c:	b40e      	push	{r1, r2, r3}
 8004a0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a12:	b500      	push	{lr}
 8004a14:	b09c      	sub	sp, #112	; 0x70
 8004a16:	ab1d      	add	r3, sp, #116	; 0x74
 8004a18:	9002      	str	r0, [sp, #8]
 8004a1a:	9006      	str	r0, [sp, #24]
 8004a1c:	9107      	str	r1, [sp, #28]
 8004a1e:	9104      	str	r1, [sp, #16]
 8004a20:	4808      	ldr	r0, [pc, #32]	; (8004a44 <siprintf+0x38>)
 8004a22:	4909      	ldr	r1, [pc, #36]	; (8004a48 <siprintf+0x3c>)
 8004a24:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a28:	9105      	str	r1, [sp, #20]
 8004a2a:	6800      	ldr	r0, [r0, #0]
 8004a2c:	a902      	add	r1, sp, #8
 8004a2e:	9301      	str	r3, [sp, #4]
 8004a30:	f000 f868 	bl	8004b04 <_svfiprintf_r>
 8004a34:	2200      	movs	r2, #0
 8004a36:	9b02      	ldr	r3, [sp, #8]
 8004a38:	701a      	strb	r2, [r3, #0]
 8004a3a:	b01c      	add	sp, #112	; 0x70
 8004a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a40:	b003      	add	sp, #12
 8004a42:	4770      	bx	lr
 8004a44:	20000034 	.word	0x20000034
 8004a48:	ffff0208 	.word	0xffff0208

08004a4c <__ssputs_r>:
 8004a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a50:	688e      	ldr	r6, [r1, #8]
 8004a52:	4682      	mov	sl, r0
 8004a54:	429e      	cmp	r6, r3
 8004a56:	460c      	mov	r4, r1
 8004a58:	4690      	mov	r8, r2
 8004a5a:	461f      	mov	r7, r3
 8004a5c:	d838      	bhi.n	8004ad0 <__ssputs_r+0x84>
 8004a5e:	898a      	ldrh	r2, [r1, #12]
 8004a60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a64:	d032      	beq.n	8004acc <__ssputs_r+0x80>
 8004a66:	6825      	ldr	r5, [r4, #0]
 8004a68:	6909      	ldr	r1, [r1, #16]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	eba5 0901 	sub.w	r9, r5, r1
 8004a70:	6965      	ldr	r5, [r4, #20]
 8004a72:	444b      	add	r3, r9
 8004a74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a7c:	106d      	asrs	r5, r5, #1
 8004a7e:	429d      	cmp	r5, r3
 8004a80:	bf38      	it	cc
 8004a82:	461d      	movcc	r5, r3
 8004a84:	0553      	lsls	r3, r2, #21
 8004a86:	d531      	bpl.n	8004aec <__ssputs_r+0xa0>
 8004a88:	4629      	mov	r1, r5
 8004a8a:	f000 fb6f 	bl	800516c <_malloc_r>
 8004a8e:	4606      	mov	r6, r0
 8004a90:	b950      	cbnz	r0, 8004aa8 <__ssputs_r+0x5c>
 8004a92:	230c      	movs	r3, #12
 8004a94:	f04f 30ff 	mov.w	r0, #4294967295
 8004a98:	f8ca 3000 	str.w	r3, [sl]
 8004a9c:	89a3      	ldrh	r3, [r4, #12]
 8004a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aa2:	81a3      	strh	r3, [r4, #12]
 8004aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aa8:	464a      	mov	r2, r9
 8004aaa:	6921      	ldr	r1, [r4, #16]
 8004aac:	f000 face 	bl	800504c <memcpy>
 8004ab0:	89a3      	ldrh	r3, [r4, #12]
 8004ab2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aba:	81a3      	strh	r3, [r4, #12]
 8004abc:	6126      	str	r6, [r4, #16]
 8004abe:	444e      	add	r6, r9
 8004ac0:	6026      	str	r6, [r4, #0]
 8004ac2:	463e      	mov	r6, r7
 8004ac4:	6165      	str	r5, [r4, #20]
 8004ac6:	eba5 0509 	sub.w	r5, r5, r9
 8004aca:	60a5      	str	r5, [r4, #8]
 8004acc:	42be      	cmp	r6, r7
 8004ace:	d900      	bls.n	8004ad2 <__ssputs_r+0x86>
 8004ad0:	463e      	mov	r6, r7
 8004ad2:	4632      	mov	r2, r6
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	6820      	ldr	r0, [r4, #0]
 8004ad8:	f000 fac6 	bl	8005068 <memmove>
 8004adc:	68a3      	ldr	r3, [r4, #8]
 8004ade:	2000      	movs	r0, #0
 8004ae0:	1b9b      	subs	r3, r3, r6
 8004ae2:	60a3      	str	r3, [r4, #8]
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	4433      	add	r3, r6
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	e7db      	b.n	8004aa4 <__ssputs_r+0x58>
 8004aec:	462a      	mov	r2, r5
 8004aee:	f000 fbb1 	bl	8005254 <_realloc_r>
 8004af2:	4606      	mov	r6, r0
 8004af4:	2800      	cmp	r0, #0
 8004af6:	d1e1      	bne.n	8004abc <__ssputs_r+0x70>
 8004af8:	4650      	mov	r0, sl
 8004afa:	6921      	ldr	r1, [r4, #16]
 8004afc:	f000 face 	bl	800509c <_free_r>
 8004b00:	e7c7      	b.n	8004a92 <__ssputs_r+0x46>
	...

08004b04 <_svfiprintf_r>:
 8004b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b08:	4698      	mov	r8, r3
 8004b0a:	898b      	ldrh	r3, [r1, #12]
 8004b0c:	4607      	mov	r7, r0
 8004b0e:	061b      	lsls	r3, r3, #24
 8004b10:	460d      	mov	r5, r1
 8004b12:	4614      	mov	r4, r2
 8004b14:	b09d      	sub	sp, #116	; 0x74
 8004b16:	d50e      	bpl.n	8004b36 <_svfiprintf_r+0x32>
 8004b18:	690b      	ldr	r3, [r1, #16]
 8004b1a:	b963      	cbnz	r3, 8004b36 <_svfiprintf_r+0x32>
 8004b1c:	2140      	movs	r1, #64	; 0x40
 8004b1e:	f000 fb25 	bl	800516c <_malloc_r>
 8004b22:	6028      	str	r0, [r5, #0]
 8004b24:	6128      	str	r0, [r5, #16]
 8004b26:	b920      	cbnz	r0, 8004b32 <_svfiprintf_r+0x2e>
 8004b28:	230c      	movs	r3, #12
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b30:	e0d1      	b.n	8004cd6 <_svfiprintf_r+0x1d2>
 8004b32:	2340      	movs	r3, #64	; 0x40
 8004b34:	616b      	str	r3, [r5, #20]
 8004b36:	2300      	movs	r3, #0
 8004b38:	9309      	str	r3, [sp, #36]	; 0x24
 8004b3a:	2320      	movs	r3, #32
 8004b3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b40:	2330      	movs	r3, #48	; 0x30
 8004b42:	f04f 0901 	mov.w	r9, #1
 8004b46:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004cf0 <_svfiprintf_r+0x1ec>
 8004b4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b52:	4623      	mov	r3, r4
 8004b54:	469a      	mov	sl, r3
 8004b56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b5a:	b10a      	cbz	r2, 8004b60 <_svfiprintf_r+0x5c>
 8004b5c:	2a25      	cmp	r2, #37	; 0x25
 8004b5e:	d1f9      	bne.n	8004b54 <_svfiprintf_r+0x50>
 8004b60:	ebba 0b04 	subs.w	fp, sl, r4
 8004b64:	d00b      	beq.n	8004b7e <_svfiprintf_r+0x7a>
 8004b66:	465b      	mov	r3, fp
 8004b68:	4622      	mov	r2, r4
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	4638      	mov	r0, r7
 8004b6e:	f7ff ff6d 	bl	8004a4c <__ssputs_r>
 8004b72:	3001      	adds	r0, #1
 8004b74:	f000 80aa 	beq.w	8004ccc <_svfiprintf_r+0x1c8>
 8004b78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b7a:	445a      	add	r2, fp
 8004b7c:	9209      	str	r2, [sp, #36]	; 0x24
 8004b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 80a2 	beq.w	8004ccc <_svfiprintf_r+0x1c8>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b92:	f10a 0a01 	add.w	sl, sl, #1
 8004b96:	9304      	str	r3, [sp, #16]
 8004b98:	9307      	str	r3, [sp, #28]
 8004b9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b9e:	931a      	str	r3, [sp, #104]	; 0x68
 8004ba0:	4654      	mov	r4, sl
 8004ba2:	2205      	movs	r2, #5
 8004ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ba8:	4851      	ldr	r0, [pc, #324]	; (8004cf0 <_svfiprintf_r+0x1ec>)
 8004baa:	f000 fa41 	bl	8005030 <memchr>
 8004bae:	9a04      	ldr	r2, [sp, #16]
 8004bb0:	b9d8      	cbnz	r0, 8004bea <_svfiprintf_r+0xe6>
 8004bb2:	06d0      	lsls	r0, r2, #27
 8004bb4:	bf44      	itt	mi
 8004bb6:	2320      	movmi	r3, #32
 8004bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bbc:	0711      	lsls	r1, r2, #28
 8004bbe:	bf44      	itt	mi
 8004bc0:	232b      	movmi	r3, #43	; 0x2b
 8004bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bca:	2b2a      	cmp	r3, #42	; 0x2a
 8004bcc:	d015      	beq.n	8004bfa <_svfiprintf_r+0xf6>
 8004bce:	4654      	mov	r4, sl
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	f04f 0c0a 	mov.w	ip, #10
 8004bd6:	9a07      	ldr	r2, [sp, #28]
 8004bd8:	4621      	mov	r1, r4
 8004bda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bde:	3b30      	subs	r3, #48	; 0x30
 8004be0:	2b09      	cmp	r3, #9
 8004be2:	d94e      	bls.n	8004c82 <_svfiprintf_r+0x17e>
 8004be4:	b1b0      	cbz	r0, 8004c14 <_svfiprintf_r+0x110>
 8004be6:	9207      	str	r2, [sp, #28]
 8004be8:	e014      	b.n	8004c14 <_svfiprintf_r+0x110>
 8004bea:	eba0 0308 	sub.w	r3, r0, r8
 8004bee:	fa09 f303 	lsl.w	r3, r9, r3
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	46a2      	mov	sl, r4
 8004bf6:	9304      	str	r3, [sp, #16]
 8004bf8:	e7d2      	b.n	8004ba0 <_svfiprintf_r+0x9c>
 8004bfa:	9b03      	ldr	r3, [sp, #12]
 8004bfc:	1d19      	adds	r1, r3, #4
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	9103      	str	r1, [sp, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	bfbb      	ittet	lt
 8004c06:	425b      	neglt	r3, r3
 8004c08:	f042 0202 	orrlt.w	r2, r2, #2
 8004c0c:	9307      	strge	r3, [sp, #28]
 8004c0e:	9307      	strlt	r3, [sp, #28]
 8004c10:	bfb8      	it	lt
 8004c12:	9204      	strlt	r2, [sp, #16]
 8004c14:	7823      	ldrb	r3, [r4, #0]
 8004c16:	2b2e      	cmp	r3, #46	; 0x2e
 8004c18:	d10c      	bne.n	8004c34 <_svfiprintf_r+0x130>
 8004c1a:	7863      	ldrb	r3, [r4, #1]
 8004c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c1e:	d135      	bne.n	8004c8c <_svfiprintf_r+0x188>
 8004c20:	9b03      	ldr	r3, [sp, #12]
 8004c22:	3402      	adds	r4, #2
 8004c24:	1d1a      	adds	r2, r3, #4
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	9203      	str	r2, [sp, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	bfb8      	it	lt
 8004c2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c32:	9305      	str	r3, [sp, #20]
 8004c34:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004cf4 <_svfiprintf_r+0x1f0>
 8004c38:	2203      	movs	r2, #3
 8004c3a:	4650      	mov	r0, sl
 8004c3c:	7821      	ldrb	r1, [r4, #0]
 8004c3e:	f000 f9f7 	bl	8005030 <memchr>
 8004c42:	b140      	cbz	r0, 8004c56 <_svfiprintf_r+0x152>
 8004c44:	2340      	movs	r3, #64	; 0x40
 8004c46:	eba0 000a 	sub.w	r0, r0, sl
 8004c4a:	fa03 f000 	lsl.w	r0, r3, r0
 8004c4e:	9b04      	ldr	r3, [sp, #16]
 8004c50:	3401      	adds	r4, #1
 8004c52:	4303      	orrs	r3, r0
 8004c54:	9304      	str	r3, [sp, #16]
 8004c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c5a:	2206      	movs	r2, #6
 8004c5c:	4826      	ldr	r0, [pc, #152]	; (8004cf8 <_svfiprintf_r+0x1f4>)
 8004c5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c62:	f000 f9e5 	bl	8005030 <memchr>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d038      	beq.n	8004cdc <_svfiprintf_r+0x1d8>
 8004c6a:	4b24      	ldr	r3, [pc, #144]	; (8004cfc <_svfiprintf_r+0x1f8>)
 8004c6c:	bb1b      	cbnz	r3, 8004cb6 <_svfiprintf_r+0x1b2>
 8004c6e:	9b03      	ldr	r3, [sp, #12]
 8004c70:	3307      	adds	r3, #7
 8004c72:	f023 0307 	bic.w	r3, r3, #7
 8004c76:	3308      	adds	r3, #8
 8004c78:	9303      	str	r3, [sp, #12]
 8004c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c7c:	4433      	add	r3, r6
 8004c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c80:	e767      	b.n	8004b52 <_svfiprintf_r+0x4e>
 8004c82:	460c      	mov	r4, r1
 8004c84:	2001      	movs	r0, #1
 8004c86:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c8a:	e7a5      	b.n	8004bd8 <_svfiprintf_r+0xd4>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f04f 0c0a 	mov.w	ip, #10
 8004c92:	4619      	mov	r1, r3
 8004c94:	3401      	adds	r4, #1
 8004c96:	9305      	str	r3, [sp, #20]
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c9e:	3a30      	subs	r2, #48	; 0x30
 8004ca0:	2a09      	cmp	r2, #9
 8004ca2:	d903      	bls.n	8004cac <_svfiprintf_r+0x1a8>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0c5      	beq.n	8004c34 <_svfiprintf_r+0x130>
 8004ca8:	9105      	str	r1, [sp, #20]
 8004caa:	e7c3      	b.n	8004c34 <_svfiprintf_r+0x130>
 8004cac:	4604      	mov	r4, r0
 8004cae:	2301      	movs	r3, #1
 8004cb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cb4:	e7f0      	b.n	8004c98 <_svfiprintf_r+0x194>
 8004cb6:	ab03      	add	r3, sp, #12
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	462a      	mov	r2, r5
 8004cbc:	4638      	mov	r0, r7
 8004cbe:	4b10      	ldr	r3, [pc, #64]	; (8004d00 <_svfiprintf_r+0x1fc>)
 8004cc0:	a904      	add	r1, sp, #16
 8004cc2:	f3af 8000 	nop.w
 8004cc6:	1c42      	adds	r2, r0, #1
 8004cc8:	4606      	mov	r6, r0
 8004cca:	d1d6      	bne.n	8004c7a <_svfiprintf_r+0x176>
 8004ccc:	89ab      	ldrh	r3, [r5, #12]
 8004cce:	065b      	lsls	r3, r3, #25
 8004cd0:	f53f af2c 	bmi.w	8004b2c <_svfiprintf_r+0x28>
 8004cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cd6:	b01d      	add	sp, #116	; 0x74
 8004cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cdc:	ab03      	add	r3, sp, #12
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	462a      	mov	r2, r5
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <_svfiprintf_r+0x1fc>)
 8004ce6:	a904      	add	r1, sp, #16
 8004ce8:	f000 f87c 	bl	8004de4 <_printf_i>
 8004cec:	e7eb      	b.n	8004cc6 <_svfiprintf_r+0x1c2>
 8004cee:	bf00      	nop
 8004cf0:	08005350 	.word	0x08005350
 8004cf4:	08005356 	.word	0x08005356
 8004cf8:	0800535a 	.word	0x0800535a
 8004cfc:	00000000 	.word	0x00000000
 8004d00:	08004a4d 	.word	0x08004a4d

08004d04 <_printf_common>:
 8004d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d08:	4616      	mov	r6, r2
 8004d0a:	4699      	mov	r9, r3
 8004d0c:	688a      	ldr	r2, [r1, #8]
 8004d0e:	690b      	ldr	r3, [r1, #16]
 8004d10:	4607      	mov	r7, r0
 8004d12:	4293      	cmp	r3, r2
 8004d14:	bfb8      	it	lt
 8004d16:	4613      	movlt	r3, r2
 8004d18:	6033      	str	r3, [r6, #0]
 8004d1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d1e:	460c      	mov	r4, r1
 8004d20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d24:	b10a      	cbz	r2, 8004d2a <_printf_common+0x26>
 8004d26:	3301      	adds	r3, #1
 8004d28:	6033      	str	r3, [r6, #0]
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	0699      	lsls	r1, r3, #26
 8004d2e:	bf42      	ittt	mi
 8004d30:	6833      	ldrmi	r3, [r6, #0]
 8004d32:	3302      	addmi	r3, #2
 8004d34:	6033      	strmi	r3, [r6, #0]
 8004d36:	6825      	ldr	r5, [r4, #0]
 8004d38:	f015 0506 	ands.w	r5, r5, #6
 8004d3c:	d106      	bne.n	8004d4c <_printf_common+0x48>
 8004d3e:	f104 0a19 	add.w	sl, r4, #25
 8004d42:	68e3      	ldr	r3, [r4, #12]
 8004d44:	6832      	ldr	r2, [r6, #0]
 8004d46:	1a9b      	subs	r3, r3, r2
 8004d48:	42ab      	cmp	r3, r5
 8004d4a:	dc28      	bgt.n	8004d9e <_printf_common+0x9a>
 8004d4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d50:	1e13      	subs	r3, r2, #0
 8004d52:	6822      	ldr	r2, [r4, #0]
 8004d54:	bf18      	it	ne
 8004d56:	2301      	movne	r3, #1
 8004d58:	0692      	lsls	r2, r2, #26
 8004d5a:	d42d      	bmi.n	8004db8 <_printf_common+0xb4>
 8004d5c:	4649      	mov	r1, r9
 8004d5e:	4638      	mov	r0, r7
 8004d60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d64:	47c0      	blx	r8
 8004d66:	3001      	adds	r0, #1
 8004d68:	d020      	beq.n	8004dac <_printf_common+0xa8>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	68e5      	ldr	r5, [r4, #12]
 8004d6e:	f003 0306 	and.w	r3, r3, #6
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	bf18      	it	ne
 8004d76:	2500      	movne	r5, #0
 8004d78:	6832      	ldr	r2, [r6, #0]
 8004d7a:	f04f 0600 	mov.w	r6, #0
 8004d7e:	68a3      	ldr	r3, [r4, #8]
 8004d80:	bf08      	it	eq
 8004d82:	1aad      	subeq	r5, r5, r2
 8004d84:	6922      	ldr	r2, [r4, #16]
 8004d86:	bf08      	it	eq
 8004d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	bfc4      	itt	gt
 8004d90:	1a9b      	subgt	r3, r3, r2
 8004d92:	18ed      	addgt	r5, r5, r3
 8004d94:	341a      	adds	r4, #26
 8004d96:	42b5      	cmp	r5, r6
 8004d98:	d11a      	bne.n	8004dd0 <_printf_common+0xcc>
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	e008      	b.n	8004db0 <_printf_common+0xac>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	4652      	mov	r2, sl
 8004da2:	4649      	mov	r1, r9
 8004da4:	4638      	mov	r0, r7
 8004da6:	47c0      	blx	r8
 8004da8:	3001      	adds	r0, #1
 8004daa:	d103      	bne.n	8004db4 <_printf_common+0xb0>
 8004dac:	f04f 30ff 	mov.w	r0, #4294967295
 8004db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db4:	3501      	adds	r5, #1
 8004db6:	e7c4      	b.n	8004d42 <_printf_common+0x3e>
 8004db8:	2030      	movs	r0, #48	; 0x30
 8004dba:	18e1      	adds	r1, r4, r3
 8004dbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dc6:	4422      	add	r2, r4
 8004dc8:	3302      	adds	r3, #2
 8004dca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dce:	e7c5      	b.n	8004d5c <_printf_common+0x58>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	4622      	mov	r2, r4
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	4638      	mov	r0, r7
 8004dd8:	47c0      	blx	r8
 8004dda:	3001      	adds	r0, #1
 8004ddc:	d0e6      	beq.n	8004dac <_printf_common+0xa8>
 8004dde:	3601      	adds	r6, #1
 8004de0:	e7d9      	b.n	8004d96 <_printf_common+0x92>
	...

08004de4 <_printf_i>:
 8004de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004de8:	7e0f      	ldrb	r7, [r1, #24]
 8004dea:	4691      	mov	r9, r2
 8004dec:	2f78      	cmp	r7, #120	; 0x78
 8004dee:	4680      	mov	r8, r0
 8004df0:	460c      	mov	r4, r1
 8004df2:	469a      	mov	sl, r3
 8004df4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004df6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004dfa:	d807      	bhi.n	8004e0c <_printf_i+0x28>
 8004dfc:	2f62      	cmp	r7, #98	; 0x62
 8004dfe:	d80a      	bhi.n	8004e16 <_printf_i+0x32>
 8004e00:	2f00      	cmp	r7, #0
 8004e02:	f000 80d9 	beq.w	8004fb8 <_printf_i+0x1d4>
 8004e06:	2f58      	cmp	r7, #88	; 0x58
 8004e08:	f000 80a4 	beq.w	8004f54 <_printf_i+0x170>
 8004e0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e14:	e03a      	b.n	8004e8c <_printf_i+0xa8>
 8004e16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e1a:	2b15      	cmp	r3, #21
 8004e1c:	d8f6      	bhi.n	8004e0c <_printf_i+0x28>
 8004e1e:	a101      	add	r1, pc, #4	; (adr r1, 8004e24 <_printf_i+0x40>)
 8004e20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e24:	08004e7d 	.word	0x08004e7d
 8004e28:	08004e91 	.word	0x08004e91
 8004e2c:	08004e0d 	.word	0x08004e0d
 8004e30:	08004e0d 	.word	0x08004e0d
 8004e34:	08004e0d 	.word	0x08004e0d
 8004e38:	08004e0d 	.word	0x08004e0d
 8004e3c:	08004e91 	.word	0x08004e91
 8004e40:	08004e0d 	.word	0x08004e0d
 8004e44:	08004e0d 	.word	0x08004e0d
 8004e48:	08004e0d 	.word	0x08004e0d
 8004e4c:	08004e0d 	.word	0x08004e0d
 8004e50:	08004f9f 	.word	0x08004f9f
 8004e54:	08004ec1 	.word	0x08004ec1
 8004e58:	08004f81 	.word	0x08004f81
 8004e5c:	08004e0d 	.word	0x08004e0d
 8004e60:	08004e0d 	.word	0x08004e0d
 8004e64:	08004fc1 	.word	0x08004fc1
 8004e68:	08004e0d 	.word	0x08004e0d
 8004e6c:	08004ec1 	.word	0x08004ec1
 8004e70:	08004e0d 	.word	0x08004e0d
 8004e74:	08004e0d 	.word	0x08004e0d
 8004e78:	08004f89 	.word	0x08004f89
 8004e7c:	682b      	ldr	r3, [r5, #0]
 8004e7e:	1d1a      	adds	r2, r3, #4
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	602a      	str	r2, [r5, #0]
 8004e84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e0a4      	b.n	8004fda <_printf_i+0x1f6>
 8004e90:	6820      	ldr	r0, [r4, #0]
 8004e92:	6829      	ldr	r1, [r5, #0]
 8004e94:	0606      	lsls	r6, r0, #24
 8004e96:	f101 0304 	add.w	r3, r1, #4
 8004e9a:	d50a      	bpl.n	8004eb2 <_printf_i+0xce>
 8004e9c:	680e      	ldr	r6, [r1, #0]
 8004e9e:	602b      	str	r3, [r5, #0]
 8004ea0:	2e00      	cmp	r6, #0
 8004ea2:	da03      	bge.n	8004eac <_printf_i+0xc8>
 8004ea4:	232d      	movs	r3, #45	; 0x2d
 8004ea6:	4276      	negs	r6, r6
 8004ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eac:	230a      	movs	r3, #10
 8004eae:	485e      	ldr	r0, [pc, #376]	; (8005028 <_printf_i+0x244>)
 8004eb0:	e019      	b.n	8004ee6 <_printf_i+0x102>
 8004eb2:	680e      	ldr	r6, [r1, #0]
 8004eb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004eb8:	602b      	str	r3, [r5, #0]
 8004eba:	bf18      	it	ne
 8004ebc:	b236      	sxthne	r6, r6
 8004ebe:	e7ef      	b.n	8004ea0 <_printf_i+0xbc>
 8004ec0:	682b      	ldr	r3, [r5, #0]
 8004ec2:	6820      	ldr	r0, [r4, #0]
 8004ec4:	1d19      	adds	r1, r3, #4
 8004ec6:	6029      	str	r1, [r5, #0]
 8004ec8:	0601      	lsls	r1, r0, #24
 8004eca:	d501      	bpl.n	8004ed0 <_printf_i+0xec>
 8004ecc:	681e      	ldr	r6, [r3, #0]
 8004ece:	e002      	b.n	8004ed6 <_printf_i+0xf2>
 8004ed0:	0646      	lsls	r6, r0, #25
 8004ed2:	d5fb      	bpl.n	8004ecc <_printf_i+0xe8>
 8004ed4:	881e      	ldrh	r6, [r3, #0]
 8004ed6:	2f6f      	cmp	r7, #111	; 0x6f
 8004ed8:	bf0c      	ite	eq
 8004eda:	2308      	moveq	r3, #8
 8004edc:	230a      	movne	r3, #10
 8004ede:	4852      	ldr	r0, [pc, #328]	; (8005028 <_printf_i+0x244>)
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ee6:	6865      	ldr	r5, [r4, #4]
 8004ee8:	2d00      	cmp	r5, #0
 8004eea:	bfa8      	it	ge
 8004eec:	6821      	ldrge	r1, [r4, #0]
 8004eee:	60a5      	str	r5, [r4, #8]
 8004ef0:	bfa4      	itt	ge
 8004ef2:	f021 0104 	bicge.w	r1, r1, #4
 8004ef6:	6021      	strge	r1, [r4, #0]
 8004ef8:	b90e      	cbnz	r6, 8004efe <_printf_i+0x11a>
 8004efa:	2d00      	cmp	r5, #0
 8004efc:	d04d      	beq.n	8004f9a <_printf_i+0x1b6>
 8004efe:	4615      	mov	r5, r2
 8004f00:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f04:	fb03 6711 	mls	r7, r3, r1, r6
 8004f08:	5dc7      	ldrb	r7, [r0, r7]
 8004f0a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f0e:	4637      	mov	r7, r6
 8004f10:	42bb      	cmp	r3, r7
 8004f12:	460e      	mov	r6, r1
 8004f14:	d9f4      	bls.n	8004f00 <_printf_i+0x11c>
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d10b      	bne.n	8004f32 <_printf_i+0x14e>
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	07de      	lsls	r6, r3, #31
 8004f1e:	d508      	bpl.n	8004f32 <_printf_i+0x14e>
 8004f20:	6923      	ldr	r3, [r4, #16]
 8004f22:	6861      	ldr	r1, [r4, #4]
 8004f24:	4299      	cmp	r1, r3
 8004f26:	bfde      	ittt	le
 8004f28:	2330      	movle	r3, #48	; 0x30
 8004f2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f32:	1b52      	subs	r2, r2, r5
 8004f34:	6122      	str	r2, [r4, #16]
 8004f36:	464b      	mov	r3, r9
 8004f38:	4621      	mov	r1, r4
 8004f3a:	4640      	mov	r0, r8
 8004f3c:	f8cd a000 	str.w	sl, [sp]
 8004f40:	aa03      	add	r2, sp, #12
 8004f42:	f7ff fedf 	bl	8004d04 <_printf_common>
 8004f46:	3001      	adds	r0, #1
 8004f48:	d14c      	bne.n	8004fe4 <_printf_i+0x200>
 8004f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4e:	b004      	add	sp, #16
 8004f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f54:	4834      	ldr	r0, [pc, #208]	; (8005028 <_printf_i+0x244>)
 8004f56:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f5a:	6829      	ldr	r1, [r5, #0]
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f62:	6029      	str	r1, [r5, #0]
 8004f64:	061d      	lsls	r5, r3, #24
 8004f66:	d514      	bpl.n	8004f92 <_printf_i+0x1ae>
 8004f68:	07df      	lsls	r7, r3, #31
 8004f6a:	bf44      	itt	mi
 8004f6c:	f043 0320 	orrmi.w	r3, r3, #32
 8004f70:	6023      	strmi	r3, [r4, #0]
 8004f72:	b91e      	cbnz	r6, 8004f7c <_printf_i+0x198>
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	f023 0320 	bic.w	r3, r3, #32
 8004f7a:	6023      	str	r3, [r4, #0]
 8004f7c:	2310      	movs	r3, #16
 8004f7e:	e7af      	b.n	8004ee0 <_printf_i+0xfc>
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	f043 0320 	orr.w	r3, r3, #32
 8004f86:	6023      	str	r3, [r4, #0]
 8004f88:	2378      	movs	r3, #120	; 0x78
 8004f8a:	4828      	ldr	r0, [pc, #160]	; (800502c <_printf_i+0x248>)
 8004f8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f90:	e7e3      	b.n	8004f5a <_printf_i+0x176>
 8004f92:	0659      	lsls	r1, r3, #25
 8004f94:	bf48      	it	mi
 8004f96:	b2b6      	uxthmi	r6, r6
 8004f98:	e7e6      	b.n	8004f68 <_printf_i+0x184>
 8004f9a:	4615      	mov	r5, r2
 8004f9c:	e7bb      	b.n	8004f16 <_printf_i+0x132>
 8004f9e:	682b      	ldr	r3, [r5, #0]
 8004fa0:	6826      	ldr	r6, [r4, #0]
 8004fa2:	1d18      	adds	r0, r3, #4
 8004fa4:	6961      	ldr	r1, [r4, #20]
 8004fa6:	6028      	str	r0, [r5, #0]
 8004fa8:	0635      	lsls	r5, r6, #24
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	d501      	bpl.n	8004fb2 <_printf_i+0x1ce>
 8004fae:	6019      	str	r1, [r3, #0]
 8004fb0:	e002      	b.n	8004fb8 <_printf_i+0x1d4>
 8004fb2:	0670      	lsls	r0, r6, #25
 8004fb4:	d5fb      	bpl.n	8004fae <_printf_i+0x1ca>
 8004fb6:	8019      	strh	r1, [r3, #0]
 8004fb8:	2300      	movs	r3, #0
 8004fba:	4615      	mov	r5, r2
 8004fbc:	6123      	str	r3, [r4, #16]
 8004fbe:	e7ba      	b.n	8004f36 <_printf_i+0x152>
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	1d1a      	adds	r2, r3, #4
 8004fc6:	602a      	str	r2, [r5, #0]
 8004fc8:	681d      	ldr	r5, [r3, #0]
 8004fca:	6862      	ldr	r2, [r4, #4]
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f000 f82f 	bl	8005030 <memchr>
 8004fd2:	b108      	cbz	r0, 8004fd8 <_printf_i+0x1f4>
 8004fd4:	1b40      	subs	r0, r0, r5
 8004fd6:	6060      	str	r0, [r4, #4]
 8004fd8:	6863      	ldr	r3, [r4, #4]
 8004fda:	6123      	str	r3, [r4, #16]
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fe2:	e7a8      	b.n	8004f36 <_printf_i+0x152>
 8004fe4:	462a      	mov	r2, r5
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	4640      	mov	r0, r8
 8004fea:	6923      	ldr	r3, [r4, #16]
 8004fec:	47d0      	blx	sl
 8004fee:	3001      	adds	r0, #1
 8004ff0:	d0ab      	beq.n	8004f4a <_printf_i+0x166>
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	079b      	lsls	r3, r3, #30
 8004ff6:	d413      	bmi.n	8005020 <_printf_i+0x23c>
 8004ff8:	68e0      	ldr	r0, [r4, #12]
 8004ffa:	9b03      	ldr	r3, [sp, #12]
 8004ffc:	4298      	cmp	r0, r3
 8004ffe:	bfb8      	it	lt
 8005000:	4618      	movlt	r0, r3
 8005002:	e7a4      	b.n	8004f4e <_printf_i+0x16a>
 8005004:	2301      	movs	r3, #1
 8005006:	4632      	mov	r2, r6
 8005008:	4649      	mov	r1, r9
 800500a:	4640      	mov	r0, r8
 800500c:	47d0      	blx	sl
 800500e:	3001      	adds	r0, #1
 8005010:	d09b      	beq.n	8004f4a <_printf_i+0x166>
 8005012:	3501      	adds	r5, #1
 8005014:	68e3      	ldr	r3, [r4, #12]
 8005016:	9903      	ldr	r1, [sp, #12]
 8005018:	1a5b      	subs	r3, r3, r1
 800501a:	42ab      	cmp	r3, r5
 800501c:	dcf2      	bgt.n	8005004 <_printf_i+0x220>
 800501e:	e7eb      	b.n	8004ff8 <_printf_i+0x214>
 8005020:	2500      	movs	r5, #0
 8005022:	f104 0619 	add.w	r6, r4, #25
 8005026:	e7f5      	b.n	8005014 <_printf_i+0x230>
 8005028:	08005361 	.word	0x08005361
 800502c:	08005372 	.word	0x08005372

08005030 <memchr>:
 8005030:	4603      	mov	r3, r0
 8005032:	b510      	push	{r4, lr}
 8005034:	b2c9      	uxtb	r1, r1
 8005036:	4402      	add	r2, r0
 8005038:	4293      	cmp	r3, r2
 800503a:	4618      	mov	r0, r3
 800503c:	d101      	bne.n	8005042 <memchr+0x12>
 800503e:	2000      	movs	r0, #0
 8005040:	e003      	b.n	800504a <memchr+0x1a>
 8005042:	7804      	ldrb	r4, [r0, #0]
 8005044:	3301      	adds	r3, #1
 8005046:	428c      	cmp	r4, r1
 8005048:	d1f6      	bne.n	8005038 <memchr+0x8>
 800504a:	bd10      	pop	{r4, pc}

0800504c <memcpy>:
 800504c:	440a      	add	r2, r1
 800504e:	4291      	cmp	r1, r2
 8005050:	f100 33ff 	add.w	r3, r0, #4294967295
 8005054:	d100      	bne.n	8005058 <memcpy+0xc>
 8005056:	4770      	bx	lr
 8005058:	b510      	push	{r4, lr}
 800505a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800505e:	4291      	cmp	r1, r2
 8005060:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005064:	d1f9      	bne.n	800505a <memcpy+0xe>
 8005066:	bd10      	pop	{r4, pc}

08005068 <memmove>:
 8005068:	4288      	cmp	r0, r1
 800506a:	b510      	push	{r4, lr}
 800506c:	eb01 0402 	add.w	r4, r1, r2
 8005070:	d902      	bls.n	8005078 <memmove+0x10>
 8005072:	4284      	cmp	r4, r0
 8005074:	4623      	mov	r3, r4
 8005076:	d807      	bhi.n	8005088 <memmove+0x20>
 8005078:	1e43      	subs	r3, r0, #1
 800507a:	42a1      	cmp	r1, r4
 800507c:	d008      	beq.n	8005090 <memmove+0x28>
 800507e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005082:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005086:	e7f8      	b.n	800507a <memmove+0x12>
 8005088:	4601      	mov	r1, r0
 800508a:	4402      	add	r2, r0
 800508c:	428a      	cmp	r2, r1
 800508e:	d100      	bne.n	8005092 <memmove+0x2a>
 8005090:	bd10      	pop	{r4, pc}
 8005092:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005096:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800509a:	e7f7      	b.n	800508c <memmove+0x24>

0800509c <_free_r>:
 800509c:	b538      	push	{r3, r4, r5, lr}
 800509e:	4605      	mov	r5, r0
 80050a0:	2900      	cmp	r1, #0
 80050a2:	d040      	beq.n	8005126 <_free_r+0x8a>
 80050a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050a8:	1f0c      	subs	r4, r1, #4
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	bfb8      	it	lt
 80050ae:	18e4      	addlt	r4, r4, r3
 80050b0:	f000 f910 	bl	80052d4 <__malloc_lock>
 80050b4:	4a1c      	ldr	r2, [pc, #112]	; (8005128 <_free_r+0x8c>)
 80050b6:	6813      	ldr	r3, [r2, #0]
 80050b8:	b933      	cbnz	r3, 80050c8 <_free_r+0x2c>
 80050ba:	6063      	str	r3, [r4, #4]
 80050bc:	6014      	str	r4, [r2, #0]
 80050be:	4628      	mov	r0, r5
 80050c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050c4:	f000 b90c 	b.w	80052e0 <__malloc_unlock>
 80050c8:	42a3      	cmp	r3, r4
 80050ca:	d908      	bls.n	80050de <_free_r+0x42>
 80050cc:	6820      	ldr	r0, [r4, #0]
 80050ce:	1821      	adds	r1, r4, r0
 80050d0:	428b      	cmp	r3, r1
 80050d2:	bf01      	itttt	eq
 80050d4:	6819      	ldreq	r1, [r3, #0]
 80050d6:	685b      	ldreq	r3, [r3, #4]
 80050d8:	1809      	addeq	r1, r1, r0
 80050da:	6021      	streq	r1, [r4, #0]
 80050dc:	e7ed      	b.n	80050ba <_free_r+0x1e>
 80050de:	461a      	mov	r2, r3
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	b10b      	cbz	r3, 80050e8 <_free_r+0x4c>
 80050e4:	42a3      	cmp	r3, r4
 80050e6:	d9fa      	bls.n	80050de <_free_r+0x42>
 80050e8:	6811      	ldr	r1, [r2, #0]
 80050ea:	1850      	adds	r0, r2, r1
 80050ec:	42a0      	cmp	r0, r4
 80050ee:	d10b      	bne.n	8005108 <_free_r+0x6c>
 80050f0:	6820      	ldr	r0, [r4, #0]
 80050f2:	4401      	add	r1, r0
 80050f4:	1850      	adds	r0, r2, r1
 80050f6:	4283      	cmp	r3, r0
 80050f8:	6011      	str	r1, [r2, #0]
 80050fa:	d1e0      	bne.n	80050be <_free_r+0x22>
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	4401      	add	r1, r0
 8005102:	6011      	str	r1, [r2, #0]
 8005104:	6053      	str	r3, [r2, #4]
 8005106:	e7da      	b.n	80050be <_free_r+0x22>
 8005108:	d902      	bls.n	8005110 <_free_r+0x74>
 800510a:	230c      	movs	r3, #12
 800510c:	602b      	str	r3, [r5, #0]
 800510e:	e7d6      	b.n	80050be <_free_r+0x22>
 8005110:	6820      	ldr	r0, [r4, #0]
 8005112:	1821      	adds	r1, r4, r0
 8005114:	428b      	cmp	r3, r1
 8005116:	bf01      	itttt	eq
 8005118:	6819      	ldreq	r1, [r3, #0]
 800511a:	685b      	ldreq	r3, [r3, #4]
 800511c:	1809      	addeq	r1, r1, r0
 800511e:	6021      	streq	r1, [r4, #0]
 8005120:	6063      	str	r3, [r4, #4]
 8005122:	6054      	str	r4, [r2, #4]
 8005124:	e7cb      	b.n	80050be <_free_r+0x22>
 8005126:	bd38      	pop	{r3, r4, r5, pc}
 8005128:	20000144 	.word	0x20000144

0800512c <sbrk_aligned>:
 800512c:	b570      	push	{r4, r5, r6, lr}
 800512e:	4e0e      	ldr	r6, [pc, #56]	; (8005168 <sbrk_aligned+0x3c>)
 8005130:	460c      	mov	r4, r1
 8005132:	6831      	ldr	r1, [r6, #0]
 8005134:	4605      	mov	r5, r0
 8005136:	b911      	cbnz	r1, 800513e <sbrk_aligned+0x12>
 8005138:	f000 f8bc 	bl	80052b4 <_sbrk_r>
 800513c:	6030      	str	r0, [r6, #0]
 800513e:	4621      	mov	r1, r4
 8005140:	4628      	mov	r0, r5
 8005142:	f000 f8b7 	bl	80052b4 <_sbrk_r>
 8005146:	1c43      	adds	r3, r0, #1
 8005148:	d00a      	beq.n	8005160 <sbrk_aligned+0x34>
 800514a:	1cc4      	adds	r4, r0, #3
 800514c:	f024 0403 	bic.w	r4, r4, #3
 8005150:	42a0      	cmp	r0, r4
 8005152:	d007      	beq.n	8005164 <sbrk_aligned+0x38>
 8005154:	1a21      	subs	r1, r4, r0
 8005156:	4628      	mov	r0, r5
 8005158:	f000 f8ac 	bl	80052b4 <_sbrk_r>
 800515c:	3001      	adds	r0, #1
 800515e:	d101      	bne.n	8005164 <sbrk_aligned+0x38>
 8005160:	f04f 34ff 	mov.w	r4, #4294967295
 8005164:	4620      	mov	r0, r4
 8005166:	bd70      	pop	{r4, r5, r6, pc}
 8005168:	20000148 	.word	0x20000148

0800516c <_malloc_r>:
 800516c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005170:	1ccd      	adds	r5, r1, #3
 8005172:	f025 0503 	bic.w	r5, r5, #3
 8005176:	3508      	adds	r5, #8
 8005178:	2d0c      	cmp	r5, #12
 800517a:	bf38      	it	cc
 800517c:	250c      	movcc	r5, #12
 800517e:	2d00      	cmp	r5, #0
 8005180:	4607      	mov	r7, r0
 8005182:	db01      	blt.n	8005188 <_malloc_r+0x1c>
 8005184:	42a9      	cmp	r1, r5
 8005186:	d905      	bls.n	8005194 <_malloc_r+0x28>
 8005188:	230c      	movs	r3, #12
 800518a:	2600      	movs	r6, #0
 800518c:	603b      	str	r3, [r7, #0]
 800518e:	4630      	mov	r0, r6
 8005190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005194:	4e2e      	ldr	r6, [pc, #184]	; (8005250 <_malloc_r+0xe4>)
 8005196:	f000 f89d 	bl	80052d4 <__malloc_lock>
 800519a:	6833      	ldr	r3, [r6, #0]
 800519c:	461c      	mov	r4, r3
 800519e:	bb34      	cbnz	r4, 80051ee <_malloc_r+0x82>
 80051a0:	4629      	mov	r1, r5
 80051a2:	4638      	mov	r0, r7
 80051a4:	f7ff ffc2 	bl	800512c <sbrk_aligned>
 80051a8:	1c43      	adds	r3, r0, #1
 80051aa:	4604      	mov	r4, r0
 80051ac:	d14d      	bne.n	800524a <_malloc_r+0xde>
 80051ae:	6834      	ldr	r4, [r6, #0]
 80051b0:	4626      	mov	r6, r4
 80051b2:	2e00      	cmp	r6, #0
 80051b4:	d140      	bne.n	8005238 <_malloc_r+0xcc>
 80051b6:	6823      	ldr	r3, [r4, #0]
 80051b8:	4631      	mov	r1, r6
 80051ba:	4638      	mov	r0, r7
 80051bc:	eb04 0803 	add.w	r8, r4, r3
 80051c0:	f000 f878 	bl	80052b4 <_sbrk_r>
 80051c4:	4580      	cmp	r8, r0
 80051c6:	d13a      	bne.n	800523e <_malloc_r+0xd2>
 80051c8:	6821      	ldr	r1, [r4, #0]
 80051ca:	3503      	adds	r5, #3
 80051cc:	1a6d      	subs	r5, r5, r1
 80051ce:	f025 0503 	bic.w	r5, r5, #3
 80051d2:	3508      	adds	r5, #8
 80051d4:	2d0c      	cmp	r5, #12
 80051d6:	bf38      	it	cc
 80051d8:	250c      	movcc	r5, #12
 80051da:	4638      	mov	r0, r7
 80051dc:	4629      	mov	r1, r5
 80051de:	f7ff ffa5 	bl	800512c <sbrk_aligned>
 80051e2:	3001      	adds	r0, #1
 80051e4:	d02b      	beq.n	800523e <_malloc_r+0xd2>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	442b      	add	r3, r5
 80051ea:	6023      	str	r3, [r4, #0]
 80051ec:	e00e      	b.n	800520c <_malloc_r+0xa0>
 80051ee:	6822      	ldr	r2, [r4, #0]
 80051f0:	1b52      	subs	r2, r2, r5
 80051f2:	d41e      	bmi.n	8005232 <_malloc_r+0xc6>
 80051f4:	2a0b      	cmp	r2, #11
 80051f6:	d916      	bls.n	8005226 <_malloc_r+0xba>
 80051f8:	1961      	adds	r1, r4, r5
 80051fa:	42a3      	cmp	r3, r4
 80051fc:	6025      	str	r5, [r4, #0]
 80051fe:	bf18      	it	ne
 8005200:	6059      	strne	r1, [r3, #4]
 8005202:	6863      	ldr	r3, [r4, #4]
 8005204:	bf08      	it	eq
 8005206:	6031      	streq	r1, [r6, #0]
 8005208:	5162      	str	r2, [r4, r5]
 800520a:	604b      	str	r3, [r1, #4]
 800520c:	4638      	mov	r0, r7
 800520e:	f104 060b 	add.w	r6, r4, #11
 8005212:	f000 f865 	bl	80052e0 <__malloc_unlock>
 8005216:	f026 0607 	bic.w	r6, r6, #7
 800521a:	1d23      	adds	r3, r4, #4
 800521c:	1af2      	subs	r2, r6, r3
 800521e:	d0b6      	beq.n	800518e <_malloc_r+0x22>
 8005220:	1b9b      	subs	r3, r3, r6
 8005222:	50a3      	str	r3, [r4, r2]
 8005224:	e7b3      	b.n	800518e <_malloc_r+0x22>
 8005226:	6862      	ldr	r2, [r4, #4]
 8005228:	42a3      	cmp	r3, r4
 800522a:	bf0c      	ite	eq
 800522c:	6032      	streq	r2, [r6, #0]
 800522e:	605a      	strne	r2, [r3, #4]
 8005230:	e7ec      	b.n	800520c <_malloc_r+0xa0>
 8005232:	4623      	mov	r3, r4
 8005234:	6864      	ldr	r4, [r4, #4]
 8005236:	e7b2      	b.n	800519e <_malloc_r+0x32>
 8005238:	4634      	mov	r4, r6
 800523a:	6876      	ldr	r6, [r6, #4]
 800523c:	e7b9      	b.n	80051b2 <_malloc_r+0x46>
 800523e:	230c      	movs	r3, #12
 8005240:	4638      	mov	r0, r7
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	f000 f84c 	bl	80052e0 <__malloc_unlock>
 8005248:	e7a1      	b.n	800518e <_malloc_r+0x22>
 800524a:	6025      	str	r5, [r4, #0]
 800524c:	e7de      	b.n	800520c <_malloc_r+0xa0>
 800524e:	bf00      	nop
 8005250:	20000144 	.word	0x20000144

08005254 <_realloc_r>:
 8005254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005258:	4680      	mov	r8, r0
 800525a:	4614      	mov	r4, r2
 800525c:	460e      	mov	r6, r1
 800525e:	b921      	cbnz	r1, 800526a <_realloc_r+0x16>
 8005260:	4611      	mov	r1, r2
 8005262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005266:	f7ff bf81 	b.w	800516c <_malloc_r>
 800526a:	b92a      	cbnz	r2, 8005278 <_realloc_r+0x24>
 800526c:	f7ff ff16 	bl	800509c <_free_r>
 8005270:	4625      	mov	r5, r4
 8005272:	4628      	mov	r0, r5
 8005274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005278:	f000 f838 	bl	80052ec <_malloc_usable_size_r>
 800527c:	4284      	cmp	r4, r0
 800527e:	4607      	mov	r7, r0
 8005280:	d802      	bhi.n	8005288 <_realloc_r+0x34>
 8005282:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005286:	d812      	bhi.n	80052ae <_realloc_r+0x5a>
 8005288:	4621      	mov	r1, r4
 800528a:	4640      	mov	r0, r8
 800528c:	f7ff ff6e 	bl	800516c <_malloc_r>
 8005290:	4605      	mov	r5, r0
 8005292:	2800      	cmp	r0, #0
 8005294:	d0ed      	beq.n	8005272 <_realloc_r+0x1e>
 8005296:	42bc      	cmp	r4, r7
 8005298:	4622      	mov	r2, r4
 800529a:	4631      	mov	r1, r6
 800529c:	bf28      	it	cs
 800529e:	463a      	movcs	r2, r7
 80052a0:	f7ff fed4 	bl	800504c <memcpy>
 80052a4:	4631      	mov	r1, r6
 80052a6:	4640      	mov	r0, r8
 80052a8:	f7ff fef8 	bl	800509c <_free_r>
 80052ac:	e7e1      	b.n	8005272 <_realloc_r+0x1e>
 80052ae:	4635      	mov	r5, r6
 80052b0:	e7df      	b.n	8005272 <_realloc_r+0x1e>
	...

080052b4 <_sbrk_r>:
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	2300      	movs	r3, #0
 80052b8:	4d05      	ldr	r5, [pc, #20]	; (80052d0 <_sbrk_r+0x1c>)
 80052ba:	4604      	mov	r4, r0
 80052bc:	4608      	mov	r0, r1
 80052be:	602b      	str	r3, [r5, #0]
 80052c0:	f7fc faa2 	bl	8001808 <_sbrk>
 80052c4:	1c43      	adds	r3, r0, #1
 80052c6:	d102      	bne.n	80052ce <_sbrk_r+0x1a>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	b103      	cbz	r3, 80052ce <_sbrk_r+0x1a>
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	bd38      	pop	{r3, r4, r5, pc}
 80052d0:	2000014c 	.word	0x2000014c

080052d4 <__malloc_lock>:
 80052d4:	4801      	ldr	r0, [pc, #4]	; (80052dc <__malloc_lock+0x8>)
 80052d6:	f000 b811 	b.w	80052fc <__retarget_lock_acquire_recursive>
 80052da:	bf00      	nop
 80052dc:	20000150 	.word	0x20000150

080052e0 <__malloc_unlock>:
 80052e0:	4801      	ldr	r0, [pc, #4]	; (80052e8 <__malloc_unlock+0x8>)
 80052e2:	f000 b80c 	b.w	80052fe <__retarget_lock_release_recursive>
 80052e6:	bf00      	nop
 80052e8:	20000150 	.word	0x20000150

080052ec <_malloc_usable_size_r>:
 80052ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052f0:	1f18      	subs	r0, r3, #4
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	bfbc      	itt	lt
 80052f6:	580b      	ldrlt	r3, [r1, r0]
 80052f8:	18c0      	addlt	r0, r0, r3
 80052fa:	4770      	bx	lr

080052fc <__retarget_lock_acquire_recursive>:
 80052fc:	4770      	bx	lr

080052fe <__retarget_lock_release_recursive>:
 80052fe:	4770      	bx	lr

08005300 <_init>:
 8005300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005302:	bf00      	nop
 8005304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005306:	bc08      	pop	{r3}
 8005308:	469e      	mov	lr, r3
 800530a:	4770      	bx	lr

0800530c <_fini>:
 800530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530e:	bf00      	nop
 8005310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005312:	bc08      	pop	{r3}
 8005314:	469e      	mov	lr, r3
 8005316:	4770      	bx	lr
